// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proxy/shadowsocks/config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace V2Ray.Core.Proxy.Shadowsocks {

  /// <summary>Holder for reflection information generated from proxy/shadowsocks/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for proxy/shadowsocks/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5wcm94eS9zaGFkb3dzb2Nrcy9jb25maWcucHJvdG8SHHYycmF5LmNvcmUu",
            "cHJveHkuc2hhZG93c29ja3MaJ3YycmF5LmNvbS9jb3JlL2NvbW1vbi9uZXQv",
            "bmV0d29yay5wcm90bxopdjJyYXkuY29tL2NvcmUvY29tbW9uL3Byb3RvY29s",
            "L3VzZXIucHJvdG8aMHYycmF5LmNvbS9jb3JlL2NvbW1vbi9wcm90b2NvbC9z",
            "ZXJ2ZXJfc3BlYy5wcm90byLOAQoHQWNjb3VudBIQCghwYXNzd29yZBgBIAEo",
            "CRI9CgtjaXBoZXJfdHlwZRgCIAEoDjIoLnYycmF5LmNvcmUucHJveHkuc2hh",
            "ZG93c29ja3MuQ2lwaGVyVHlwZRI+CgNvdGEYAyABKA4yMS52MnJheS5jb3Jl",
            "LnByb3h5LnNoYWRvd3NvY2tzLkFjY291bnQuT25lVGltZUF1dGgiMgoLT25l",
            "VGltZUF1dGgSCAoEQXV0bxAAEgwKCERpc2FibGVkEAESCwoHRW5hYmxlZBAC",
            "IogBCgxTZXJ2ZXJDb25maWcSFwoLdWRwX2VuYWJsZWQYASABKAhCAhgBEi4K",
            "BHVzZXIYAiABKAsyIC52MnJheS5jb3JlLmNvbW1vbi5wcm90b2NvbC5Vc2Vy",
            "Ei8KB25ldHdvcmsYAyADKA4yHi52MnJheS5jb3JlLmNvbW1vbi5uZXQuTmV0",
            "d29yayJKCgxDbGllbnRDb25maWcSOgoGc2VydmVyGAEgAygLMioudjJyYXku",
            "Y29yZS5jb21tb24ucHJvdG9jb2wuU2VydmVyRW5kcG9pbnQqnwEKCkNpcGhl",
            "clR5cGUSCwoHVU5LTk9XThAAEg8KC0FFU18xMjhfQ0ZCEAESDwoLQUVTXzI1",
            "Nl9DRkIQAhIMCghDSEFDSEEyMBADEhEKDUNIQUNIQTIwX0lFVEYQBBIPCgtB",
            "RVNfMTI4X0dDTRAFEg8KC0FFU18yNTZfR0NNEAYSFQoRQ0hBQ0hBMjBfUE9M",
            "WTEzMDUQBxIICgROT05FEAhCUAogY29tLnYycmF5LmNvcmUucHJveHkuc2hh",
            "ZG93c29ja3NQAVoLc2hhZG93c29ja3OqAhxWMlJheS5Db3JlLlByb3h5LlNo",
            "YWRvd3NvY2tzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::V2Ray.Core.Common.Net.NetworkReflection.Descriptor, global::V2Ray.Core.Common.Protocol.UserReflection.Descriptor, global::V2Ray.Core.Common.Protocol.ServerSpecReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::V2Ray.Core.Proxy.Shadowsocks.CipherType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.Proxy.Shadowsocks.Account), global::V2Ray.Core.Proxy.Shadowsocks.Account.Parser, new[]{ "Password", "CipherType", "Ota" }, null, new[]{ typeof(global::V2Ray.Core.Proxy.Shadowsocks.Account.Types.OneTimeAuth) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.Proxy.Shadowsocks.ServerConfig), global::V2Ray.Core.Proxy.Shadowsocks.ServerConfig.Parser, new[]{ "UdpEnabled", "User", "Network" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.Proxy.Shadowsocks.ClientConfig), global::V2Ray.Core.Proxy.Shadowsocks.ClientConfig.Parser, new[]{ "Server" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CipherType {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("AES_128_CFB")] Aes128Cfb = 1,
    [pbr::OriginalName("AES_256_CFB")] Aes256Cfb = 2,
    [pbr::OriginalName("CHACHA20")] Chacha20 = 3,
    [pbr::OriginalName("CHACHA20_IETF")] Chacha20Ietf = 4,
    [pbr::OriginalName("AES_128_GCM")] Aes128Gcm = 5,
    [pbr::OriginalName("AES_256_GCM")] Aes256Gcm = 6,
    [pbr::OriginalName("CHACHA20_POLY1305")] Chacha20Poly1305 = 7,
    [pbr::OriginalName("NONE")] None = 8,
  }

  #endregion

  #region Messages
  public sealed partial class Account : pb::IMessage<Account> {
    private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Account> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.Proxy.Shadowsocks.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account(Account other) : this() {
      password_ = other.password_;
      cipherType_ = other.cipherType_;
      ota_ = other.ota_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account Clone() {
      return new Account(this);
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 1;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cipher_type" field.</summary>
    public const int CipherTypeFieldNumber = 2;
    private global::V2Ray.Core.Proxy.Shadowsocks.CipherType cipherType_ = global::V2Ray.Core.Proxy.Shadowsocks.CipherType.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Proxy.Shadowsocks.CipherType CipherType {
      get { return cipherType_; }
      set {
        cipherType_ = value;
      }
    }

    /// <summary>Field number for the "ota" field.</summary>
    public const int OtaFieldNumber = 3;
    private global::V2Ray.Core.Proxy.Shadowsocks.Account.Types.OneTimeAuth ota_ = global::V2Ray.Core.Proxy.Shadowsocks.Account.Types.OneTimeAuth.Auto;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Proxy.Shadowsocks.Account.Types.OneTimeAuth Ota {
      get { return ota_; }
      set {
        ota_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Account);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Account other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Password != other.Password) return false;
      if (CipherType != other.CipherType) return false;
      if (Ota != other.Ota) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (CipherType != global::V2Ray.Core.Proxy.Shadowsocks.CipherType.Unknown) hash ^= CipherType.GetHashCode();
      if (Ota != global::V2Ray.Core.Proxy.Shadowsocks.Account.Types.OneTimeAuth.Auto) hash ^= Ota.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Password.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Password);
      }
      if (CipherType != global::V2Ray.Core.Proxy.Shadowsocks.CipherType.Unknown) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CipherType);
      }
      if (Ota != global::V2Ray.Core.Proxy.Shadowsocks.Account.Types.OneTimeAuth.Auto) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Ota);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (CipherType != global::V2Ray.Core.Proxy.Shadowsocks.CipherType.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CipherType);
      }
      if (Ota != global::V2Ray.Core.Proxy.Shadowsocks.Account.Types.OneTimeAuth.Auto) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ota);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Account other) {
      if (other == null) {
        return;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.CipherType != global::V2Ray.Core.Proxy.Shadowsocks.CipherType.Unknown) {
        CipherType = other.CipherType;
      }
      if (other.Ota != global::V2Ray.Core.Proxy.Shadowsocks.Account.Types.OneTimeAuth.Auto) {
        Ota = other.Ota;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Password = input.ReadString();
            break;
          }
          case 16: {
            CipherType = (global::V2Ray.Core.Proxy.Shadowsocks.CipherType) input.ReadEnum();
            break;
          }
          case 24: {
            Ota = (global::V2Ray.Core.Proxy.Shadowsocks.Account.Types.OneTimeAuth) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Account message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum OneTimeAuth {
        [pbr::OriginalName("Auto")] Auto = 0,
        [pbr::OriginalName("Disabled")] Disabled = 1,
        [pbr::OriginalName("Enabled")] Enabled = 2,
      }

    }
    #endregion

  }

  public sealed partial class ServerConfig : pb::IMessage<ServerConfig> {
    private static readonly pb::MessageParser<ServerConfig> _parser = new pb::MessageParser<ServerConfig>(() => new ServerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.Proxy.Shadowsocks.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerConfig(ServerConfig other) : this() {
      udpEnabled_ = other.udpEnabled_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      network_ = other.network_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerConfig Clone() {
      return new ServerConfig(this);
    }

    /// <summary>Field number for the "udp_enabled" field.</summary>
    public const int UdpEnabledFieldNumber = 1;
    private bool udpEnabled_;
    /// <summary>
    /// UdpEnabled specified whether or not to enable UDP for Shadowsocks.
    /// Deprecated. Use 'network' field.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UdpEnabled {
      get { return udpEnabled_; }
      set {
        udpEnabled_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::V2Ray.Core.Common.Protocol.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Protocol.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 3;
    private static readonly pb::FieldCodec<global::V2Ray.Core.Common.Net.Network> _repeated_network_codec
        = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::V2Ray.Core.Common.Net.Network) x);
    private readonly pbc::RepeatedField<global::V2Ray.Core.Common.Net.Network> network_ = new pbc::RepeatedField<global::V2Ray.Core.Common.Net.Network>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.Common.Net.Network> Network {
      get { return network_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UdpEnabled != other.UdpEnabled) return false;
      if (!object.Equals(User, other.User)) return false;
      if(!network_.Equals(other.network_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UdpEnabled != false) hash ^= UdpEnabled.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      hash ^= network_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UdpEnabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(UdpEnabled);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      network_.WriteTo(output, _repeated_network_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UdpEnabled != false) {
        size += 1 + 1;
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      size += network_.CalculateSize(_repeated_network_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerConfig other) {
      if (other == null) {
        return;
      }
      if (other.UdpEnabled != false) {
        UdpEnabled = other.UdpEnabled;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::V2Ray.Core.Common.Protocol.User();
        }
        User.MergeFrom(other.User);
      }
      network_.Add(other.network_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UdpEnabled = input.ReadBool();
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::V2Ray.Core.Common.Protocol.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 26:
          case 24: {
            network_.AddEntriesFrom(input, _repeated_network_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientConfig : pb::IMessage<ClientConfig> {
    private static readonly pb::MessageParser<ClientConfig> _parser = new pb::MessageParser<ClientConfig>(() => new ClientConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.Proxy.Shadowsocks.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig(ClientConfig other) : this() {
      server_ = other.server_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig Clone() {
      return new ClientConfig(this);
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 1;
    private static readonly pb::FieldCodec<global::V2Ray.Core.Common.Protocol.ServerEndpoint> _repeated_server_codec
        = pb::FieldCodec.ForMessage(10, global::V2Ray.Core.Common.Protocol.ServerEndpoint.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.Common.Protocol.ServerEndpoint> server_ = new pbc::RepeatedField<global::V2Ray.Core.Common.Protocol.ServerEndpoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.Common.Protocol.ServerEndpoint> Server {
      get { return server_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!server_.Equals(other.server_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= server_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      server_.WriteTo(output, _repeated_server_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += server_.CalculateSize(_repeated_server_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientConfig other) {
      if (other == null) {
        return;
      }
      server_.Add(other.server_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            server_.AddEntriesFrom(input, _repeated_server_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
