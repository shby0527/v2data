// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proxy/socks/config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace V2Ray.Core.Proxy.Socks {

  /// <summary>Holder for reflection information generated from proxy/socks/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for proxy/socks/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chhwcm94eS9zb2Nrcy9jb25maWcucHJvdG8SFnYycmF5LmNvcmUucHJveHku",
            "c29ja3MaJ3YycmF5LmNvbS9jb3JlL2NvbW1vbi9uZXQvYWRkcmVzcy5wcm90",
            "bxowdjJyYXkuY29tL2NvcmUvY29tbW9uL3Byb3RvY29sL3NlcnZlcl9zcGVj",
            "LnByb3RvIi0KB0FjY291bnQSEAoIdXNlcm5hbWUYASABKAkSEAoIcGFzc3dv",
            "cmQYAiABKAkirAIKDFNlcnZlckNvbmZpZxIzCglhdXRoX3R5cGUYASABKA4y",
            "IC52MnJheS5jb3JlLnByb3h5LnNvY2tzLkF1dGhUeXBlEkQKCGFjY291bnRz",
            "GAIgAygLMjIudjJyYXkuY29yZS5wcm94eS5zb2Nrcy5TZXJ2ZXJDb25maWcu",
            "QWNjb3VudHNFbnRyeRIyCgdhZGRyZXNzGAMgASgLMiEudjJyYXkuY29yZS5j",
            "b21tb24ubmV0LklQT3JEb21haW4SEwoLdWRwX2VuYWJsZWQYBCABKAgSEwoH",
            "dGltZW91dBgFIAEoDUICGAESEgoKdXNlcl9sZXZlbBgGIAEoDRovCg1BY2Nv",
            "dW50c0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiSgoM",
            "Q2xpZW50Q29uZmlnEjoKBnNlcnZlchgBIAMoCzIqLnYycmF5LmNvcmUuY29t",
            "bW9uLnByb3RvY29sLlNlcnZlckVuZHBvaW50KiUKCEF1dGhUeXBlEgsKB05P",
            "X0FVVEgQABIMCghQQVNTV09SRBABQj4KGmNvbS52MnJheS5jb3JlLnByb3h5",
            "LnNvY2tzUAFaBXNvY2tzqgIWVjJSYXkuQ29yZS5Qcm94eS5Tb2Nrc2IGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::V2Ray.Core.Common.Net.AddressReflection.Descriptor, global::V2Ray.Core.Common.Protocol.ServerSpecReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::V2Ray.Core.Proxy.Socks.AuthType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.Proxy.Socks.Account), global::V2Ray.Core.Proxy.Socks.Account.Parser, new[]{ "Username", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.Proxy.Socks.ServerConfig), global::V2Ray.Core.Proxy.Socks.ServerConfig.Parser, new[]{ "AuthType", "Accounts", "Address", "UdpEnabled", "Timeout", "UserLevel" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.Proxy.Socks.ClientConfig), global::V2Ray.Core.Proxy.Socks.ClientConfig.Parser, new[]{ "Server" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// AuthType is the authentication type of Socks proxy.
  /// </summary>
  public enum AuthType {
    /// <summary>
    /// NO_AUTH is for anounymous authentication.
    /// </summary>
    [pbr::OriginalName("NO_AUTH")] NoAuth = 0,
    /// <summary>
    /// PASSWORD is for username/password authentication.
    /// </summary>
    [pbr::OriginalName("PASSWORD")] Password = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Account represents a Socks account.
  /// </summary>
  public sealed partial class Account : pb::IMessage<Account> {
    private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Account> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.Proxy.Socks.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account(Account other) : this() {
      username_ = other.username_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account Clone() {
      return new Account(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Account);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Account other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Account other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ServerConfig is the protobuf config for Socks server.
  /// </summary>
  public sealed partial class ServerConfig : pb::IMessage<ServerConfig> {
    private static readonly pb::MessageParser<ServerConfig> _parser = new pb::MessageParser<ServerConfig>(() => new ServerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.Proxy.Socks.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerConfig(ServerConfig other) : this() {
      authType_ = other.authType_;
      accounts_ = other.accounts_.Clone();
      address_ = other.address_ != null ? other.address_.Clone() : null;
      udpEnabled_ = other.udpEnabled_;
      timeout_ = other.timeout_;
      userLevel_ = other.userLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerConfig Clone() {
      return new ServerConfig(this);
    }

    /// <summary>Field number for the "auth_type" field.</summary>
    public const int AuthTypeFieldNumber = 1;
    private global::V2Ray.Core.Proxy.Socks.AuthType authType_ = global::V2Ray.Core.Proxy.Socks.AuthType.NoAuth;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Proxy.Socks.AuthType AuthType {
      get { return authType_; }
      set {
        authType_ = value;
      }
    }

    /// <summary>Field number for the "accounts" field.</summary>
    public const int AccountsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_accounts_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<string, string> accounts_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Accounts {
      get { return accounts_; }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 3;
    private global::V2Ray.Core.Common.Net.IPOrDomain address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Net.IPOrDomain Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "udp_enabled" field.</summary>
    public const int UdpEnabledFieldNumber = 4;
    private bool udpEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UdpEnabled {
      get { return udpEnabled_; }
      set {
        udpEnabled_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 5;
    private uint timeout_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "user_level" field.</summary>
    public const int UserLevelFieldNumber = 6;
    private uint userLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserLevel {
      get { return userLevel_; }
      set {
        userLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AuthType != other.AuthType) return false;
      if (!Accounts.Equals(other.Accounts)) return false;
      if (!object.Equals(Address, other.Address)) return false;
      if (UdpEnabled != other.UdpEnabled) return false;
      if (Timeout != other.Timeout) return false;
      if (UserLevel != other.UserLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AuthType != global::V2Ray.Core.Proxy.Socks.AuthType.NoAuth) hash ^= AuthType.GetHashCode();
      hash ^= Accounts.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      if (UdpEnabled != false) hash ^= UdpEnabled.GetHashCode();
      if (Timeout != 0) hash ^= Timeout.GetHashCode();
      if (UserLevel != 0) hash ^= UserLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AuthType != global::V2Ray.Core.Proxy.Socks.AuthType.NoAuth) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AuthType);
      }
      accounts_.WriteTo(output, _map_accounts_codec);
      if (address_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Address);
      }
      if (UdpEnabled != false) {
        output.WriteRawTag(32);
        output.WriteBool(UdpEnabled);
      }
      if (Timeout != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Timeout);
      }
      if (UserLevel != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(UserLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AuthType != global::V2Ray.Core.Proxy.Socks.AuthType.NoAuth) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AuthType);
      }
      size += accounts_.CalculateSize(_map_accounts_codec);
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (UdpEnabled != false) {
        size += 1 + 1;
      }
      if (Timeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timeout);
      }
      if (UserLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerConfig other) {
      if (other == null) {
        return;
      }
      if (other.AuthType != global::V2Ray.Core.Proxy.Socks.AuthType.NoAuth) {
        AuthType = other.AuthType;
      }
      accounts_.Add(other.accounts_);
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::V2Ray.Core.Common.Net.IPOrDomain();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.UdpEnabled != false) {
        UdpEnabled = other.UdpEnabled;
      }
      if (other.Timeout != 0) {
        Timeout = other.Timeout;
      }
      if (other.UserLevel != 0) {
        UserLevel = other.UserLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AuthType = (global::V2Ray.Core.Proxy.Socks.AuthType) input.ReadEnum();
            break;
          }
          case 18: {
            accounts_.AddEntriesFrom(input, _map_accounts_codec);
            break;
          }
          case 26: {
            if (address_ == null) {
              Address = new global::V2Ray.Core.Common.Net.IPOrDomain();
            }
            input.ReadMessage(Address);
            break;
          }
          case 32: {
            UdpEnabled = input.ReadBool();
            break;
          }
          case 40: {
            Timeout = input.ReadUInt32();
            break;
          }
          case 48: {
            UserLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ClientConfig is the protobuf config for Socks client.
  /// </summary>
  public sealed partial class ClientConfig : pb::IMessage<ClientConfig> {
    private static readonly pb::MessageParser<ClientConfig> _parser = new pb::MessageParser<ClientConfig>(() => new ClientConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.Proxy.Socks.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig(ClientConfig other) : this() {
      server_ = other.server_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig Clone() {
      return new ClientConfig(this);
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 1;
    private static readonly pb::FieldCodec<global::V2Ray.Core.Common.Protocol.ServerEndpoint> _repeated_server_codec
        = pb::FieldCodec.ForMessage(10, global::V2Ray.Core.Common.Protocol.ServerEndpoint.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.Common.Protocol.ServerEndpoint> server_ = new pbc::RepeatedField<global::V2Ray.Core.Common.Protocol.ServerEndpoint>();
    /// <summary>
    /// Sever is a list of Socks server addresses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.Common.Protocol.ServerEndpoint> Server {
      get { return server_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!server_.Equals(other.server_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= server_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      server_.WriteTo(output, _repeated_server_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += server_.CalculateSize(_repeated_server_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientConfig other) {
      if (other == null) {
        return;
      }
      server_.Add(other.server_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            server_.AddEntriesFrom(input, _repeated_server_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
