// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proxy/vmess/inbound/config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace V2Ray.Core.Proxy.Vmess.Inbound {

  /// <summary>Holder for reflection information generated from proxy/vmess/inbound/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for proxy/vmess/inbound/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBwcm94eS92bWVzcy9pbmJvdW5kL2NvbmZpZy5wcm90bxIedjJyYXkuY29y",
            "ZS5wcm94eS52bWVzcy5pbmJvdW5kGil2MnJheS5jb20vY29yZS9jb21tb24v",
            "cHJvdG9jb2wvdXNlci5wcm90byIaCgxEZXRvdXJDb25maWcSCgoCdG8YASAB",
            "KAkiMAoNRGVmYXVsdENvbmZpZxIQCghhbHRlcl9pZBgBIAEoDRINCgVsZXZl",
            "bBgCIAEoDSLWAQoGQ29uZmlnEi4KBHVzZXIYASADKAsyIC52MnJheS5jb3Jl",
            "LmNvbW1vbi5wcm90b2NvbC5Vc2VyEj4KB2RlZmF1bHQYAiABKAsyLS52MnJh",
            "eS5jb3JlLnByb3h5LnZtZXNzLmluYm91bmQuRGVmYXVsdENvbmZpZxI8CgZk",
            "ZXRvdXIYAyABKAsyLC52MnJheS5jb3JlLnByb3h5LnZtZXNzLmluYm91bmQu",
            "RGV0b3VyQ29uZmlnEh4KFnNlY3VyZV9lbmNyeXB0aW9uX29ubHkYBCABKAhC",
            "UAoiY29tLnYycmF5LmNvcmUucHJveHkudm1lc3MuaW5ib3VuZFABWgdpbmJv",
            "dW5kqgIeVjJSYXkuQ29yZS5Qcm94eS5WbWVzcy5JbmJvdW5kYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::V2Ray.Core.Common.Protocol.UserReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.Proxy.Vmess.Inbound.DetourConfig), global::V2Ray.Core.Proxy.Vmess.Inbound.DetourConfig.Parser, new[]{ "To" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.Proxy.Vmess.Inbound.DefaultConfig), global::V2Ray.Core.Proxy.Vmess.Inbound.DefaultConfig.Parser, new[]{ "AlterId", "Level" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.Proxy.Vmess.Inbound.Config), global::V2Ray.Core.Proxy.Vmess.Inbound.Config.Parser, new[]{ "User", "Default", "Detour", "SecureEncryptionOnly" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DetourConfig : pb::IMessage<DetourConfig> {
    private static readonly pb::MessageParser<DetourConfig> _parser = new pb::MessageParser<DetourConfig>(() => new DetourConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DetourConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.Proxy.Vmess.Inbound.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetourConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetourConfig(DetourConfig other) : this() {
      to_ = other.to_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetourConfig Clone() {
      return new DetourConfig(this);
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 1;
    private string to_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DetourConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DetourConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (To != other.To) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (To.Length != 0) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (To.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DetourConfig other) {
      if (other == null) {
        return;
      }
      if (other.To.Length != 0) {
        To = other.To;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            To = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DefaultConfig : pb::IMessage<DefaultConfig> {
    private static readonly pb::MessageParser<DefaultConfig> _parser = new pb::MessageParser<DefaultConfig>(() => new DefaultConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefaultConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.Proxy.Vmess.Inbound.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefaultConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefaultConfig(DefaultConfig other) : this() {
      alterId_ = other.alterId_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefaultConfig Clone() {
      return new DefaultConfig(this);
    }

    /// <summary>Field number for the "alter_id" field.</summary>
    public const int AlterIdFieldNumber = 1;
    private uint alterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AlterId {
      get { return alterId_; }
      set {
        alterId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefaultConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefaultConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AlterId != other.AlterId) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AlterId != 0) hash ^= AlterId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AlterId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AlterId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AlterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AlterId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefaultConfig other) {
      if (other == null) {
        return;
      }
      if (other.AlterId != 0) {
        AlterId = other.AlterId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AlterId = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.Proxy.Vmess.Inbound.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      user_ = other.user_.Clone();
      default_ = other.default_ != null ? other.default_.Clone() : null;
      detour_ = other.detour_ != null ? other.detour_.Clone() : null;
      secureEncryptionOnly_ = other.secureEncryptionOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private static readonly pb::FieldCodec<global::V2Ray.Core.Common.Protocol.User> _repeated_user_codec
        = pb::FieldCodec.ForMessage(10, global::V2Ray.Core.Common.Protocol.User.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.Common.Protocol.User> user_ = new pbc::RepeatedField<global::V2Ray.Core.Common.Protocol.User>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.Common.Protocol.User> User {
      get { return user_; }
    }

    /// <summary>Field number for the "default" field.</summary>
    public const int DefaultFieldNumber = 2;
    private global::V2Ray.Core.Proxy.Vmess.Inbound.DefaultConfig default_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Proxy.Vmess.Inbound.DefaultConfig Default {
      get { return default_; }
      set {
        default_ = value;
      }
    }

    /// <summary>Field number for the "detour" field.</summary>
    public const int DetourFieldNumber = 3;
    private global::V2Ray.Core.Proxy.Vmess.Inbound.DetourConfig detour_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Proxy.Vmess.Inbound.DetourConfig Detour {
      get { return detour_; }
      set {
        detour_ = value;
      }
    }

    /// <summary>Field number for the "secure_encryption_only" field.</summary>
    public const int SecureEncryptionOnlyFieldNumber = 4;
    private bool secureEncryptionOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SecureEncryptionOnly {
      get { return secureEncryptionOnly_; }
      set {
        secureEncryptionOnly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!user_.Equals(other.user_)) return false;
      if (!object.Equals(Default, other.Default)) return false;
      if (!object.Equals(Detour, other.Detour)) return false;
      if (SecureEncryptionOnly != other.SecureEncryptionOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= user_.GetHashCode();
      if (default_ != null) hash ^= Default.GetHashCode();
      if (detour_ != null) hash ^= Detour.GetHashCode();
      if (SecureEncryptionOnly != false) hash ^= SecureEncryptionOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      user_.WriteTo(output, _repeated_user_codec);
      if (default_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Default);
      }
      if (detour_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Detour);
      }
      if (SecureEncryptionOnly != false) {
        output.WriteRawTag(32);
        output.WriteBool(SecureEncryptionOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += user_.CalculateSize(_repeated_user_codec);
      if (default_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Default);
      }
      if (detour_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Detour);
      }
      if (SecureEncryptionOnly != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      user_.Add(other.user_);
      if (other.default_ != null) {
        if (default_ == null) {
          Default = new global::V2Ray.Core.Proxy.Vmess.Inbound.DefaultConfig();
        }
        Default.MergeFrom(other.Default);
      }
      if (other.detour_ != null) {
        if (detour_ == null) {
          Detour = new global::V2Ray.Core.Proxy.Vmess.Inbound.DetourConfig();
        }
        Detour.MergeFrom(other.Detour);
      }
      if (other.SecureEncryptionOnly != false) {
        SecureEncryptionOnly = other.SecureEncryptionOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            user_.AddEntriesFrom(input, _repeated_user_codec);
            break;
          }
          case 18: {
            if (default_ == null) {
              Default = new global::V2Ray.Core.Proxy.Vmess.Inbound.DefaultConfig();
            }
            input.ReadMessage(Default);
            break;
          }
          case 26: {
            if (detour_ == null) {
              Detour = new global::V2Ray.Core.Proxy.Vmess.Inbound.DetourConfig();
            }
            input.ReadMessage(Detour);
            break;
          }
          case 32: {
            SecureEncryptionOnly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
