// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: app/log/config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace V2Ray.Core.App.Log {

  /// <summary>Holder for reflection information generated from app/log/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for app/log/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRhcHAvbG9nL2NvbmZpZy5wcm90bxISdjJyYXkuY29yZS5hcHAubG9nGiN2",
            "MnJheS5jb20vY29yZS9jb21tb24vbG9nL2xvZy5wcm90byLeAQoGQ29uZmln",
            "EjMKDmVycm9yX2xvZ190eXBlGAEgASgOMhsudjJyYXkuY29yZS5hcHAubG9n",
            "LkxvZ1R5cGUSOAoPZXJyb3JfbG9nX2xldmVsGAIgASgOMh8udjJyYXkuY29y",
            "ZS5jb21tb24ubG9nLlNldmVyaXR5EhYKDmVycm9yX2xvZ19wYXRoGAMgASgJ",
            "EjQKD2FjY2Vzc19sb2dfdHlwZRgEIAEoDjIbLnYycmF5LmNvcmUuYXBwLmxv",
            "Zy5Mb2dUeXBlEhcKD2FjY2Vzc19sb2dfcGF0aBgFIAEoCSo1CgdMb2dUeXBl",
            "EggKBE5vbmUQABILCgdDb25zb2xlEAESCAoERmlsZRACEgkKBUV2ZW50EANC",
            "NAoWY29tLnYycmF5LmNvcmUuYXBwLmxvZ1ABWgNsb2eqAhJWMlJheS5Db3Jl",
            "LkFwcC5Mb2diBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::V2Ray.Core.Common.Log.LogReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::V2Ray.Core.App.Log.LogType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Log.Config), global::V2Ray.Core.App.Log.Config.Parser, new[]{ "ErrorLogType", "ErrorLogLevel", "ErrorLogPath", "AccessLogType", "AccessLogPath" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum LogType {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Console")] Console = 1,
    [pbr::OriginalName("File")] File = 2,
    [pbr::OriginalName("Event")] Event = 3,
  }

  #endregion

  #region Messages
  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Log.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      errorLogType_ = other.errorLogType_;
      errorLogLevel_ = other.errorLogLevel_;
      errorLogPath_ = other.errorLogPath_;
      accessLogType_ = other.accessLogType_;
      accessLogPath_ = other.accessLogPath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "error_log_type" field.</summary>
    public const int ErrorLogTypeFieldNumber = 1;
    private global::V2Ray.Core.App.Log.LogType errorLogType_ = global::V2Ray.Core.App.Log.LogType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.App.Log.LogType ErrorLogType {
      get { return errorLogType_; }
      set {
        errorLogType_ = value;
      }
    }

    /// <summary>Field number for the "error_log_level" field.</summary>
    public const int ErrorLogLevelFieldNumber = 2;
    private global::V2Ray.Core.Common.Log.Severity errorLogLevel_ = global::V2Ray.Core.Common.Log.Severity.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Log.Severity ErrorLogLevel {
      get { return errorLogLevel_; }
      set {
        errorLogLevel_ = value;
      }
    }

    /// <summary>Field number for the "error_log_path" field.</summary>
    public const int ErrorLogPathFieldNumber = 3;
    private string errorLogPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorLogPath {
      get { return errorLogPath_; }
      set {
        errorLogPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "access_log_type" field.</summary>
    public const int AccessLogTypeFieldNumber = 4;
    private global::V2Ray.Core.App.Log.LogType accessLogType_ = global::V2Ray.Core.App.Log.LogType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.App.Log.LogType AccessLogType {
      get { return accessLogType_; }
      set {
        accessLogType_ = value;
      }
    }

    /// <summary>Field number for the "access_log_path" field.</summary>
    public const int AccessLogPathFieldNumber = 5;
    private string accessLogPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessLogPath {
      get { return accessLogPath_; }
      set {
        accessLogPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorLogType != other.ErrorLogType) return false;
      if (ErrorLogLevel != other.ErrorLogLevel) return false;
      if (ErrorLogPath != other.ErrorLogPath) return false;
      if (AccessLogType != other.AccessLogType) return false;
      if (AccessLogPath != other.AccessLogPath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorLogType != global::V2Ray.Core.App.Log.LogType.None) hash ^= ErrorLogType.GetHashCode();
      if (ErrorLogLevel != global::V2Ray.Core.Common.Log.Severity.Unknown) hash ^= ErrorLogLevel.GetHashCode();
      if (ErrorLogPath.Length != 0) hash ^= ErrorLogPath.GetHashCode();
      if (AccessLogType != global::V2Ray.Core.App.Log.LogType.None) hash ^= AccessLogType.GetHashCode();
      if (AccessLogPath.Length != 0) hash ^= AccessLogPath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorLogType != global::V2Ray.Core.App.Log.LogType.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ErrorLogType);
      }
      if (ErrorLogLevel != global::V2Ray.Core.Common.Log.Severity.Unknown) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ErrorLogLevel);
      }
      if (ErrorLogPath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrorLogPath);
      }
      if (AccessLogType != global::V2Ray.Core.App.Log.LogType.None) {
        output.WriteRawTag(32);
        output.WriteEnum((int) AccessLogType);
      }
      if (AccessLogPath.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AccessLogPath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorLogType != global::V2Ray.Core.App.Log.LogType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorLogType);
      }
      if (ErrorLogLevel != global::V2Ray.Core.Common.Log.Severity.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorLogLevel);
      }
      if (ErrorLogPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorLogPath);
      }
      if (AccessLogType != global::V2Ray.Core.App.Log.LogType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccessLogType);
      }
      if (AccessLogPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessLogPath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.ErrorLogType != global::V2Ray.Core.App.Log.LogType.None) {
        ErrorLogType = other.ErrorLogType;
      }
      if (other.ErrorLogLevel != global::V2Ray.Core.Common.Log.Severity.Unknown) {
        ErrorLogLevel = other.ErrorLogLevel;
      }
      if (other.ErrorLogPath.Length != 0) {
        ErrorLogPath = other.ErrorLogPath;
      }
      if (other.AccessLogType != global::V2Ray.Core.App.Log.LogType.None) {
        AccessLogType = other.AccessLogType;
      }
      if (other.AccessLogPath.Length != 0) {
        AccessLogPath = other.AccessLogPath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorLogType = (global::V2Ray.Core.App.Log.LogType) input.ReadEnum();
            break;
          }
          case 16: {
            ErrorLogLevel = (global::V2Ray.Core.Common.Log.Severity) input.ReadEnum();
            break;
          }
          case 26: {
            ErrorLogPath = input.ReadString();
            break;
          }
          case 32: {
            AccessLogType = (global::V2Ray.Core.App.Log.LogType) input.ReadEnum();
            break;
          }
          case 42: {
            AccessLogPath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
