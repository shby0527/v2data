// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: app/router/config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace V2Ray.Core.App.Router {

  /// <summary>Holder for reflection information generated from app/router/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for app/router/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdhcHAvcm91dGVyL2NvbmZpZy5wcm90bxIVdjJyYXkuY29yZS5hcHAucm91",
            "dGVyGiR2MnJheS5jb20vY29yZS9jb21tb24vbmV0L3BvcnQucHJvdG8aJ3Yy",
            "cmF5LmNvbS9jb3JlL2NvbW1vbi9uZXQvbmV0d29yay5wcm90byKNAgoGRG9t",
            "YWluEjAKBHR5cGUYASABKA4yIi52MnJheS5jb3JlLmFwcC5yb3V0ZXIuRG9t",
            "YWluLlR5cGUSDQoFdmFsdWUYAiABKAkSOgoJYXR0cmlidXRlGAMgAygLMicu",
            "djJyYXkuY29yZS5hcHAucm91dGVyLkRvbWFpbi5BdHRyaWJ1dGUaUgoJQXR0",
            "cmlidXRlEgsKA2tleRgBIAEoCRIUCgpib29sX3ZhbHVlGAIgASgISAASEwoJ",
            "aW50X3ZhbHVlGAMgASgDSABCDQoLdHlwZWRfdmFsdWUiMgoEVHlwZRIJCgVQ",
            "bGFpbhAAEgkKBVJlZ2V4EAESCgoGRG9tYWluEAISCAoERnVsbBADIiIKBENJ",
            "RFISCgoCaXAYASABKAwSDgoGcHJlZml4GAIgASgNIkgKBUdlb0lQEhQKDGNv",
            "dW50cnlfY29kZRgBIAEoCRIpCgRjaWRyGAIgAygLMhsudjJyYXkuY29yZS5h",
            "cHAucm91dGVyLkNJRFIiOAoJR2VvSVBMaXN0EisKBWVudHJ5GAEgAygLMhwu",
            "djJyYXkuY29yZS5hcHAucm91dGVyLkdlb0lQIk4KB0dlb1NpdGUSFAoMY291",
            "bnRyeV9jb2RlGAEgASgJEi0KBmRvbWFpbhgCIAMoCzIdLnYycmF5LmNvcmUu",
            "YXBwLnJvdXRlci5Eb21haW4iPAoLR2VvU2l0ZUxpc3QSLQoFZW50cnkYASAD",
            "KAsyHi52MnJheS5jb3JlLmFwcC5yb3V0ZXIuR2VvU2l0ZSLlBAoLUm91dGlu",
            "Z1J1bGUSDQoDdGFnGAEgASgJSAASFwoNYmFsYW5jaW5nX3RhZxgMIAEoCUgA",
            "Ei0KBmRvbWFpbhgCIAMoCzIdLnYycmF5LmNvcmUuYXBwLnJvdXRlci5Eb21h",
            "aW4SLQoEY2lkchgDIAMoCzIbLnYycmF5LmNvcmUuYXBwLnJvdXRlci5DSURS",
            "QgIYARIrCgVnZW9pcBgKIAMoCzIcLnYycmF5LmNvcmUuYXBwLnJvdXRlci5H",
            "ZW9JUBI4Cgpwb3J0X3JhbmdlGAQgASgLMiAudjJyYXkuY29yZS5jb21tb24u",
            "bmV0LlBvcnRSYW5nZUICGAESMgoJcG9ydF9saXN0GA4gASgLMh8udjJyYXku",
            "Y29yZS5jb21tb24ubmV0LlBvcnRMaXN0EjwKDG5ldHdvcmtfbGlzdBgFIAEo",
            "CzIiLnYycmF5LmNvcmUuY29tbW9uLm5ldC5OZXR3b3JrTGlzdEICGAESMAoI",
            "bmV0d29ya3MYDSADKA4yHi52MnJheS5jb3JlLmNvbW1vbi5uZXQuTmV0d29y",
            "axI0Cgtzb3VyY2VfY2lkchgGIAMoCzIbLnYycmF5LmNvcmUuYXBwLnJvdXRl",
            "ci5DSURSQgIYARIyCgxzb3VyY2VfZ2VvaXAYCyADKAsyHC52MnJheS5jb3Jl",
            "LmFwcC5yb3V0ZXIuR2VvSVASEgoKdXNlcl9lbWFpbBgHIAMoCRITCgtpbmJv",
            "dW5kX3RhZxgIIAMoCRIQCghwcm90b2NvbBgJIAMoCRISCgphdHRyaWJ1dGVz",
            "GA8gASgJQgwKCnRhcmdldF90YWciNwoNQmFsYW5jaW5nUnVsZRILCgN0YWcY",
            "ASABKAkSGQoRb3V0Ym91bmRfc2VsZWN0b3IYAiADKAkiiAIKBkNvbmZpZxJF",
            "Cg9kb21haW5fc3RyYXRlZ3kYASABKA4yLC52MnJheS5jb3JlLmFwcC5yb3V0",
            "ZXIuQ29uZmlnLkRvbWFpblN0cmF0ZWd5EjAKBHJ1bGUYAiADKAsyIi52MnJh",
            "eS5jb3JlLmFwcC5yb3V0ZXIuUm91dGluZ1J1bGUSPAoOYmFsYW5jaW5nX3J1",
            "bGUYAyADKAsyJC52MnJheS5jb3JlLmFwcC5yb3V0ZXIuQmFsYW5jaW5nUnVs",
            "ZSJHCg5Eb21haW5TdHJhdGVneRIICgRBc0lzEAASCQoFVXNlSXAQARIQCgxJ",
            "cElmTm9uTWF0Y2gQAhIOCgpJcE9uRGVtYW5kEANCPQoZY29tLnYycmF5LmNv",
            "cmUuYXBwLnJvdXRlclABWgZyb3V0ZXKqAhVWMlJheS5Db3JlLkFwcC5Sb3V0",
            "ZXJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::V2Ray.Core.Common.Net.PortReflection.Descriptor, global::V2Ray.Core.Common.Net.NetworkReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Router.Domain), global::V2Ray.Core.App.Router.Domain.Parser, new[]{ "Type", "Value", "Attribute" }, null, new[]{ typeof(global::V2Ray.Core.App.Router.Domain.Types.Type) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Router.Domain.Types.Attribute), global::V2Ray.Core.App.Router.Domain.Types.Attribute.Parser, new[]{ "Key", "BoolValue", "IntValue" }, new[]{ "TypedValue" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Router.CIDR), global::V2Ray.Core.App.Router.CIDR.Parser, new[]{ "Ip", "Prefix" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Router.GeoIP), global::V2Ray.Core.App.Router.GeoIP.Parser, new[]{ "CountryCode", "Cidr" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Router.GeoIPList), global::V2Ray.Core.App.Router.GeoIPList.Parser, new[]{ "Entry" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Router.GeoSite), global::V2Ray.Core.App.Router.GeoSite.Parser, new[]{ "CountryCode", "Domain" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Router.GeoSiteList), global::V2Ray.Core.App.Router.GeoSiteList.Parser, new[]{ "Entry" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Router.RoutingRule), global::V2Ray.Core.App.Router.RoutingRule.Parser, new[]{ "Tag", "BalancingTag", "Domain", "Cidr", "Geoip", "PortRange", "PortList", "NetworkList", "Networks", "SourceCidr", "SourceGeoip", "UserEmail", "InboundTag", "Protocol", "Attributes" }, new[]{ "TargetTag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Router.BalancingRule), global::V2Ray.Core.App.Router.BalancingRule.Parser, new[]{ "Tag", "OutboundSelector" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Router.Config), global::V2Ray.Core.App.Router.Config.Parser, new[]{ "DomainStrategy", "Rule", "BalancingRule" }, null, new[]{ typeof(global::V2Ray.Core.App.Router.Config.Types.DomainStrategy) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Domain for routing decision. 
  /// </summary>
  public sealed partial class Domain : pb::IMessage<Domain> {
    private static readonly pb::MessageParser<Domain> _parser = new pb::MessageParser<Domain>(() => new Domain());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Domain> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Router.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Domain() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Domain(Domain other) : this() {
      type_ = other.type_;
      value_ = other.value_;
      attribute_ = other.attribute_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Domain Clone() {
      return new Domain(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::V2Ray.Core.App.Router.Domain.Types.Type type_ = global::V2Ray.Core.App.Router.Domain.Types.Type.Plain;
    /// <summary>
    /// Domain matching type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.App.Router.Domain.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// Domain value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.Domain.Types.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(26, global::V2Ray.Core.App.Router.Domain.Types.Attribute.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.Domain.Types.Attribute> attribute_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.Domain.Types.Attribute>();
    /// <summary>
    /// Attributes of this domain. May be used for filtering.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.Domain.Types.Attribute> Attribute {
      get { return attribute_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Domain);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Domain other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::V2Ray.Core.App.Router.Domain.Types.Type.Plain) hash ^= Type.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::V2Ray.Core.App.Router.Domain.Types.Type.Plain) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::V2Ray.Core.App.Router.Domain.Types.Type.Plain) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Domain other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::V2Ray.Core.App.Router.Domain.Types.Type.Plain) {
        Type = other.Type;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      attribute_.Add(other.attribute_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::V2Ray.Core.App.Router.Domain.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 26: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Domain message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Type of domain value.
      /// </summary>
      public enum Type {
        /// <summary>
        /// The value is used as is.
        /// </summary>
        [pbr::OriginalName("Plain")] Plain = 0,
        /// <summary>
        /// The value is used as a regular expression.
        /// </summary>
        [pbr::OriginalName("Regex")] Regex = 1,
        /// <summary>
        /// The value is a root domain.
        /// </summary>
        [pbr::OriginalName("Domain")] Domain = 2,
        /// <summary>
        /// The value is a domain.
        /// </summary>
        [pbr::OriginalName("Full")] Full = 3,
      }

      public sealed partial class Attribute : pb::IMessage<Attribute> {
        private static readonly pb::MessageParser<Attribute> _parser = new pb::MessageParser<Attribute>(() => new Attribute());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Attribute> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::V2Ray.Core.App.Router.Domain.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attribute() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attribute(Attribute other) : this() {
          key_ = other.key_;
          switch (other.TypedValueCase) {
            case TypedValueOneofCase.BoolValue:
              BoolValue = other.BoolValue;
              break;
            case TypedValueOneofCase.IntValue:
              IntValue = other.IntValue;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attribute Clone() {
          return new Attribute(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key {
          get { return key_; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "bool_value" field.</summary>
        public const int BoolValueFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool BoolValue {
          get { return typedValueCase_ == TypedValueOneofCase.BoolValue ? (bool) typedValue_ : false; }
          set {
            typedValue_ = value;
            typedValueCase_ = TypedValueOneofCase.BoolValue;
          }
        }

        /// <summary>Field number for the "int_value" field.</summary>
        public const int IntValueFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long IntValue {
          get { return typedValueCase_ == TypedValueOneofCase.IntValue ? (long) typedValue_ : 0L; }
          set {
            typedValue_ = value;
            typedValueCase_ = TypedValueOneofCase.IntValue;
          }
        }

        private object typedValue_;
        /// <summary>Enum of possible cases for the "typed_value" oneof.</summary>
        public enum TypedValueOneofCase {
          None = 0,
          BoolValue = 2,
          IntValue = 3,
        }
        private TypedValueOneofCase typedValueCase_ = TypedValueOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypedValueOneofCase TypedValueCase {
          get { return typedValueCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTypedValue() {
          typedValueCase_ = TypedValueOneofCase.None;
          typedValue_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Attribute);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Attribute other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (BoolValue != other.BoolValue) return false;
          if (IntValue != other.IntValue) return false;
          if (TypedValueCase != other.TypedValueCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          if (typedValueCase_ == TypedValueOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
          if (typedValueCase_ == TypedValueOneofCase.IntValue) hash ^= IntValue.GetHashCode();
          hash ^= (int) typedValueCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (typedValueCase_ == TypedValueOneofCase.BoolValue) {
            output.WriteRawTag(16);
            output.WriteBool(BoolValue);
          }
          if (typedValueCase_ == TypedValueOneofCase.IntValue) {
            output.WriteRawTag(24);
            output.WriteInt64(IntValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (typedValueCase_ == TypedValueOneofCase.BoolValue) {
            size += 1 + 1;
          }
          if (typedValueCase_ == TypedValueOneofCase.IntValue) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntValue);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Attribute other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
          switch (other.TypedValueCase) {
            case TypedValueOneofCase.BoolValue:
              BoolValue = other.BoolValue;
              break;
            case TypedValueOneofCase.IntValue:
              IntValue = other.IntValue;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
              case 16: {
                BoolValue = input.ReadBool();
                break;
              }
              case 24: {
                IntValue = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// IP for routing decision, in CIDR form.
  /// </summary>
  public sealed partial class CIDR : pb::IMessage<CIDR> {
    private static readonly pb::MessageParser<CIDR> _parser = new pb::MessageParser<CIDR>(() => new CIDR());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CIDR> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Router.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIDR() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIDR(CIDR other) : this() {
      ip_ = other.ip_;
      prefix_ = other.prefix_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIDR Clone() {
      return new CIDR(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private pb::ByteString ip_ = pb::ByteString.Empty;
    /// <summary>
    /// IP address, should be either 4 or 16 bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 2;
    private uint prefix_;
    /// <summary>
    /// Number of leading ones in the network mask.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Prefix {
      get { return prefix_; }
      set {
        prefix_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CIDR);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CIDR other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Prefix != other.Prefix) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Prefix != 0) hash ^= Prefix.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Ip);
      }
      if (Prefix != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Prefix);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ip);
      }
      if (Prefix != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Prefix);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CIDR other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Prefix != 0) {
        Prefix = other.Prefix;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ip = input.ReadBytes();
            break;
          }
          case 16: {
            Prefix = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GeoIP : pb::IMessage<GeoIP> {
    private static readonly pb::MessageParser<GeoIP> _parser = new pb::MessageParser<GeoIP>(() => new GeoIP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeoIP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Router.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoIP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoIP(GeoIP other) : this() {
      countryCode_ = other.countryCode_;
      cidr_ = other.cidr_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoIP Clone() {
      return new GeoIP(this);
    }

    /// <summary>Field number for the "country_code" field.</summary>
    public const int CountryCodeFieldNumber = 1;
    private string countryCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cidr" field.</summary>
    public const int CidrFieldNumber = 2;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.CIDR> _repeated_cidr_codec
        = pb::FieldCodec.ForMessage(18, global::V2Ray.Core.App.Router.CIDR.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.CIDR> cidr_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.CIDR>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.CIDR> Cidr {
      get { return cidr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeoIP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeoIP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CountryCode != other.CountryCode) return false;
      if(!cidr_.Equals(other.cidr_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CountryCode.Length != 0) hash ^= CountryCode.GetHashCode();
      hash ^= cidr_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CountryCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CountryCode);
      }
      cidr_.WriteTo(output, _repeated_cidr_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CountryCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
      }
      size += cidr_.CalculateSize(_repeated_cidr_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeoIP other) {
      if (other == null) {
        return;
      }
      if (other.CountryCode.Length != 0) {
        CountryCode = other.CountryCode;
      }
      cidr_.Add(other.cidr_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CountryCode = input.ReadString();
            break;
          }
          case 18: {
            cidr_.AddEntriesFrom(input, _repeated_cidr_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GeoIPList : pb::IMessage<GeoIPList> {
    private static readonly pb::MessageParser<GeoIPList> _parser = new pb::MessageParser<GeoIPList>(() => new GeoIPList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeoIPList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Router.ConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoIPList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoIPList(GeoIPList other) : this() {
      entry_ = other.entry_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoIPList Clone() {
      return new GeoIPList(this);
    }

    /// <summary>Field number for the "entry" field.</summary>
    public const int EntryFieldNumber = 1;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.GeoIP> _repeated_entry_codec
        = pb::FieldCodec.ForMessage(10, global::V2Ray.Core.App.Router.GeoIP.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.GeoIP> entry_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.GeoIP>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.GeoIP> Entry {
      get { return entry_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeoIPList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeoIPList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entry_.Equals(other.entry_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entry_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entry_.WriteTo(output, _repeated_entry_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entry_.CalculateSize(_repeated_entry_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeoIPList other) {
      if (other == null) {
        return;
      }
      entry_.Add(other.entry_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entry_.AddEntriesFrom(input, _repeated_entry_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GeoSite : pb::IMessage<GeoSite> {
    private static readonly pb::MessageParser<GeoSite> _parser = new pb::MessageParser<GeoSite>(() => new GeoSite());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeoSite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Router.ConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoSite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoSite(GeoSite other) : this() {
      countryCode_ = other.countryCode_;
      domain_ = other.domain_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoSite Clone() {
      return new GeoSite(this);
    }

    /// <summary>Field number for the "country_code" field.</summary>
    public const int CountryCodeFieldNumber = 1;
    private string countryCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 2;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.Domain> _repeated_domain_codec
        = pb::FieldCodec.ForMessage(18, global::V2Ray.Core.App.Router.Domain.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.Domain> domain_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.Domain>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.Domain> Domain {
      get { return domain_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeoSite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeoSite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CountryCode != other.CountryCode) return false;
      if(!domain_.Equals(other.domain_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CountryCode.Length != 0) hash ^= CountryCode.GetHashCode();
      hash ^= domain_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CountryCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CountryCode);
      }
      domain_.WriteTo(output, _repeated_domain_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CountryCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
      }
      size += domain_.CalculateSize(_repeated_domain_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeoSite other) {
      if (other == null) {
        return;
      }
      if (other.CountryCode.Length != 0) {
        CountryCode = other.CountryCode;
      }
      domain_.Add(other.domain_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CountryCode = input.ReadString();
            break;
          }
          case 18: {
            domain_.AddEntriesFrom(input, _repeated_domain_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GeoSiteList : pb::IMessage<GeoSiteList> {
    private static readonly pb::MessageParser<GeoSiteList> _parser = new pb::MessageParser<GeoSiteList>(() => new GeoSiteList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeoSiteList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Router.ConfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoSiteList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoSiteList(GeoSiteList other) : this() {
      entry_ = other.entry_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoSiteList Clone() {
      return new GeoSiteList(this);
    }

    /// <summary>Field number for the "entry" field.</summary>
    public const int EntryFieldNumber = 1;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.GeoSite> _repeated_entry_codec
        = pb::FieldCodec.ForMessage(10, global::V2Ray.Core.App.Router.GeoSite.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.GeoSite> entry_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.GeoSite>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.GeoSite> Entry {
      get { return entry_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeoSiteList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeoSiteList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entry_.Equals(other.entry_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entry_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entry_.WriteTo(output, _repeated_entry_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entry_.CalculateSize(_repeated_entry_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeoSiteList other) {
      if (other == null) {
        return;
      }
      entry_.Add(other.entry_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entry_.AddEntriesFrom(input, _repeated_entry_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoutingRule : pb::IMessage<RoutingRule> {
    private static readonly pb::MessageParser<RoutingRule> _parser = new pb::MessageParser<RoutingRule>(() => new RoutingRule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoutingRule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Router.ConfigReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingRule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingRule(RoutingRule other) : this() {
      domain_ = other.domain_.Clone();
      cidr_ = other.cidr_.Clone();
      geoip_ = other.geoip_.Clone();
      portRange_ = other.portRange_ != null ? other.portRange_.Clone() : null;
      portList_ = other.portList_ != null ? other.portList_.Clone() : null;
      networkList_ = other.networkList_ != null ? other.networkList_.Clone() : null;
      networks_ = other.networks_.Clone();
      sourceCidr_ = other.sourceCidr_.Clone();
      sourceGeoip_ = other.sourceGeoip_.Clone();
      userEmail_ = other.userEmail_.Clone();
      inboundTag_ = other.inboundTag_.Clone();
      protocol_ = other.protocol_.Clone();
      attributes_ = other.attributes_;
      switch (other.TargetTagCase) {
        case TargetTagOneofCase.Tag:
          Tag = other.Tag;
          break;
        case TargetTagOneofCase.BalancingTag:
          BalancingTag = other.BalancingTag;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingRule Clone() {
      return new RoutingRule(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    /// <summary>
    /// Tag of outbound that this rule is pointing to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return targetTagCase_ == TargetTagOneofCase.Tag ? (string) targetTag_ : ""; }
      set {
        targetTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        targetTagCase_ = TargetTagOneofCase.Tag;
      }
    }

    /// <summary>Field number for the "balancing_tag" field.</summary>
    public const int BalancingTagFieldNumber = 12;
    /// <summary>
    /// Tag of routing balancer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BalancingTag {
      get { return targetTagCase_ == TargetTagOneofCase.BalancingTag ? (string) targetTag_ : ""; }
      set {
        targetTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        targetTagCase_ = TargetTagOneofCase.BalancingTag;
      }
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 2;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.Domain> _repeated_domain_codec
        = pb::FieldCodec.ForMessage(18, global::V2Ray.Core.App.Router.Domain.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.Domain> domain_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.Domain>();
    /// <summary>
    /// List of domains for target domain matching.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.Domain> Domain {
      get { return domain_; }
    }

    /// <summary>Field number for the "cidr" field.</summary>
    public const int CidrFieldNumber = 3;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.CIDR> _repeated_cidr_codec
        = pb::FieldCodec.ForMessage(26, global::V2Ray.Core.App.Router.CIDR.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.CIDR> cidr_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.CIDR>();
    /// <summary>
    /// List of CIDRs for target IP address matching.
    /// Deprecated. Use geoip below.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.CIDR> Cidr {
      get { return cidr_; }
    }

    /// <summary>Field number for the "geoip" field.</summary>
    public const int GeoipFieldNumber = 10;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.GeoIP> _repeated_geoip_codec
        = pb::FieldCodec.ForMessage(82, global::V2Ray.Core.App.Router.GeoIP.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.GeoIP> geoip_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.GeoIP>();
    /// <summary>
    /// List of GeoIPs for target IP address matching. If this entry exists, the cidr above will have no effect.
    /// GeoIP fields with the same country code are supposed to contain exactly same content. They will be merged during runtime.
    /// For customized GeoIPs, please leave country code empty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.GeoIP> Geoip {
      get { return geoip_; }
    }

    /// <summary>Field number for the "port_range" field.</summary>
    public const int PortRangeFieldNumber = 4;
    private global::V2Ray.Core.Common.Net.PortRange portRange_;
    /// <summary>
    /// A range of port [from, to]. If the destination port is in this range, this rule takes effect.
    /// Deprecated. Use port_list.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Net.PortRange PortRange {
      get { return portRange_; }
      set {
        portRange_ = value;
      }
    }

    /// <summary>Field number for the "port_list" field.</summary>
    public const int PortListFieldNumber = 14;
    private global::V2Ray.Core.Common.Net.PortList portList_;
    /// <summary>
    /// List of ports.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Net.PortList PortList {
      get { return portList_; }
      set {
        portList_ = value;
      }
    }

    /// <summary>Field number for the "network_list" field.</summary>
    public const int NetworkListFieldNumber = 5;
    private global::V2Ray.Core.Common.Net.NetworkList networkList_;
    /// <summary>
    /// List of networks. Deprecated. Use networks.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Net.NetworkList NetworkList {
      get { return networkList_; }
      set {
        networkList_ = value;
      }
    }

    /// <summary>Field number for the "networks" field.</summary>
    public const int NetworksFieldNumber = 13;
    private static readonly pb::FieldCodec<global::V2Ray.Core.Common.Net.Network> _repeated_networks_codec
        = pb::FieldCodec.ForEnum(106, x => (int) x, x => (global::V2Ray.Core.Common.Net.Network) x);
    private readonly pbc::RepeatedField<global::V2Ray.Core.Common.Net.Network> networks_ = new pbc::RepeatedField<global::V2Ray.Core.Common.Net.Network>();
    /// <summary>
    /// List of networks for matching.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.Common.Net.Network> Networks {
      get { return networks_; }
    }

    /// <summary>Field number for the "source_cidr" field.</summary>
    public const int SourceCidrFieldNumber = 6;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.CIDR> _repeated_sourceCidr_codec
        = pb::FieldCodec.ForMessage(50, global::V2Ray.Core.App.Router.CIDR.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.CIDR> sourceCidr_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.CIDR>();
    /// <summary>
    /// List of CIDRs for source IP address matching.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.CIDR> SourceCidr {
      get { return sourceCidr_; }
    }

    /// <summary>Field number for the "source_geoip" field.</summary>
    public const int SourceGeoipFieldNumber = 11;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.GeoIP> _repeated_sourceGeoip_codec
        = pb::FieldCodec.ForMessage(90, global::V2Ray.Core.App.Router.GeoIP.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.GeoIP> sourceGeoip_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.GeoIP>();
    /// <summary>
    /// List of GeoIPs for source IP address matching. If this entry exists, the source_cidr above will have no effect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.GeoIP> SourceGeoip {
      get { return sourceGeoip_; }
    }

    /// <summary>Field number for the "user_email" field.</summary>
    public const int UserEmailFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_userEmail_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> userEmail_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UserEmail {
      get { return userEmail_; }
    }

    /// <summary>Field number for the "inbound_tag" field.</summary>
    public const int InboundTagFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_inboundTag_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> inboundTag_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InboundTag {
      get { return inboundTag_; }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_protocol_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> protocol_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Protocol {
      get { return protocol_; }
    }

    /// <summary>Field number for the "attributes" field.</summary>
    public const int AttributesFieldNumber = 15;
    private string attributes_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Attributes {
      get { return attributes_; }
      set {
        attributes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object targetTag_;
    /// <summary>Enum of possible cases for the "target_tag" oneof.</summary>
    public enum TargetTagOneofCase {
      None = 0,
      Tag = 1,
      BalancingTag = 12,
    }
    private TargetTagOneofCase targetTagCase_ = TargetTagOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetTagOneofCase TargetTagCase {
      get { return targetTagCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetTag() {
      targetTagCase_ = TargetTagOneofCase.None;
      targetTag_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoutingRule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoutingRule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (BalancingTag != other.BalancingTag) return false;
      if(!domain_.Equals(other.domain_)) return false;
      if(!cidr_.Equals(other.cidr_)) return false;
      if(!geoip_.Equals(other.geoip_)) return false;
      if (!object.Equals(PortRange, other.PortRange)) return false;
      if (!object.Equals(PortList, other.PortList)) return false;
      if (!object.Equals(NetworkList, other.NetworkList)) return false;
      if(!networks_.Equals(other.networks_)) return false;
      if(!sourceCidr_.Equals(other.sourceCidr_)) return false;
      if(!sourceGeoip_.Equals(other.sourceGeoip_)) return false;
      if(!userEmail_.Equals(other.userEmail_)) return false;
      if(!inboundTag_.Equals(other.inboundTag_)) return false;
      if(!protocol_.Equals(other.protocol_)) return false;
      if (Attributes != other.Attributes) return false;
      if (TargetTagCase != other.TargetTagCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (targetTagCase_ == TargetTagOneofCase.Tag) hash ^= Tag.GetHashCode();
      if (targetTagCase_ == TargetTagOneofCase.BalancingTag) hash ^= BalancingTag.GetHashCode();
      hash ^= domain_.GetHashCode();
      hash ^= cidr_.GetHashCode();
      hash ^= geoip_.GetHashCode();
      if (portRange_ != null) hash ^= PortRange.GetHashCode();
      if (portList_ != null) hash ^= PortList.GetHashCode();
      if (networkList_ != null) hash ^= NetworkList.GetHashCode();
      hash ^= networks_.GetHashCode();
      hash ^= sourceCidr_.GetHashCode();
      hash ^= sourceGeoip_.GetHashCode();
      hash ^= userEmail_.GetHashCode();
      hash ^= inboundTag_.GetHashCode();
      hash ^= protocol_.GetHashCode();
      if (Attributes.Length != 0) hash ^= Attributes.GetHashCode();
      hash ^= (int) targetTagCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (targetTagCase_ == TargetTagOneofCase.Tag) {
        output.WriteRawTag(10);
        output.WriteString(Tag);
      }
      domain_.WriteTo(output, _repeated_domain_codec);
      cidr_.WriteTo(output, _repeated_cidr_codec);
      if (portRange_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PortRange);
      }
      if (networkList_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(NetworkList);
      }
      sourceCidr_.WriteTo(output, _repeated_sourceCidr_codec);
      userEmail_.WriteTo(output, _repeated_userEmail_codec);
      inboundTag_.WriteTo(output, _repeated_inboundTag_codec);
      protocol_.WriteTo(output, _repeated_protocol_codec);
      geoip_.WriteTo(output, _repeated_geoip_codec);
      sourceGeoip_.WriteTo(output, _repeated_sourceGeoip_codec);
      if (targetTagCase_ == TargetTagOneofCase.BalancingTag) {
        output.WriteRawTag(98);
        output.WriteString(BalancingTag);
      }
      networks_.WriteTo(output, _repeated_networks_codec);
      if (portList_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(PortList);
      }
      if (Attributes.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Attributes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (targetTagCase_ == TargetTagOneofCase.Tag) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (targetTagCase_ == TargetTagOneofCase.BalancingTag) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BalancingTag);
      }
      size += domain_.CalculateSize(_repeated_domain_codec);
      size += cidr_.CalculateSize(_repeated_cidr_codec);
      size += geoip_.CalculateSize(_repeated_geoip_codec);
      if (portRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortRange);
      }
      if (portList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortList);
      }
      if (networkList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkList);
      }
      size += networks_.CalculateSize(_repeated_networks_codec);
      size += sourceCidr_.CalculateSize(_repeated_sourceCidr_codec);
      size += sourceGeoip_.CalculateSize(_repeated_sourceGeoip_codec);
      size += userEmail_.CalculateSize(_repeated_userEmail_codec);
      size += inboundTag_.CalculateSize(_repeated_inboundTag_codec);
      size += protocol_.CalculateSize(_repeated_protocol_codec);
      if (Attributes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Attributes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoutingRule other) {
      if (other == null) {
        return;
      }
      domain_.Add(other.domain_);
      cidr_.Add(other.cidr_);
      geoip_.Add(other.geoip_);
      if (other.portRange_ != null) {
        if (portRange_ == null) {
          PortRange = new global::V2Ray.Core.Common.Net.PortRange();
        }
        PortRange.MergeFrom(other.PortRange);
      }
      if (other.portList_ != null) {
        if (portList_ == null) {
          PortList = new global::V2Ray.Core.Common.Net.PortList();
        }
        PortList.MergeFrom(other.PortList);
      }
      if (other.networkList_ != null) {
        if (networkList_ == null) {
          NetworkList = new global::V2Ray.Core.Common.Net.NetworkList();
        }
        NetworkList.MergeFrom(other.NetworkList);
      }
      networks_.Add(other.networks_);
      sourceCidr_.Add(other.sourceCidr_);
      sourceGeoip_.Add(other.sourceGeoip_);
      userEmail_.Add(other.userEmail_);
      inboundTag_.Add(other.inboundTag_);
      protocol_.Add(other.protocol_);
      if (other.Attributes.Length != 0) {
        Attributes = other.Attributes;
      }
      switch (other.TargetTagCase) {
        case TargetTagOneofCase.Tag:
          Tag = other.Tag;
          break;
        case TargetTagOneofCase.BalancingTag:
          BalancingTag = other.BalancingTag;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Tag = input.ReadString();
            break;
          }
          case 18: {
            domain_.AddEntriesFrom(input, _repeated_domain_codec);
            break;
          }
          case 26: {
            cidr_.AddEntriesFrom(input, _repeated_cidr_codec);
            break;
          }
          case 34: {
            if (portRange_ == null) {
              PortRange = new global::V2Ray.Core.Common.Net.PortRange();
            }
            input.ReadMessage(PortRange);
            break;
          }
          case 42: {
            if (networkList_ == null) {
              NetworkList = new global::V2Ray.Core.Common.Net.NetworkList();
            }
            input.ReadMessage(NetworkList);
            break;
          }
          case 50: {
            sourceCidr_.AddEntriesFrom(input, _repeated_sourceCidr_codec);
            break;
          }
          case 58: {
            userEmail_.AddEntriesFrom(input, _repeated_userEmail_codec);
            break;
          }
          case 66: {
            inboundTag_.AddEntriesFrom(input, _repeated_inboundTag_codec);
            break;
          }
          case 74: {
            protocol_.AddEntriesFrom(input, _repeated_protocol_codec);
            break;
          }
          case 82: {
            geoip_.AddEntriesFrom(input, _repeated_geoip_codec);
            break;
          }
          case 90: {
            sourceGeoip_.AddEntriesFrom(input, _repeated_sourceGeoip_codec);
            break;
          }
          case 98: {
            BalancingTag = input.ReadString();
            break;
          }
          case 106:
          case 104: {
            networks_.AddEntriesFrom(input, _repeated_networks_codec);
            break;
          }
          case 114: {
            if (portList_ == null) {
              PortList = new global::V2Ray.Core.Common.Net.PortList();
            }
            input.ReadMessage(PortList);
            break;
          }
          case 122: {
            Attributes = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BalancingRule : pb::IMessage<BalancingRule> {
    private static readonly pb::MessageParser<BalancingRule> _parser = new pb::MessageParser<BalancingRule>(() => new BalancingRule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BalancingRule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Router.ConfigReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BalancingRule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BalancingRule(BalancingRule other) : this() {
      tag_ = other.tag_;
      outboundSelector_ = other.outboundSelector_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BalancingRule Clone() {
      return new BalancingRule(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private string tag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "outbound_selector" field.</summary>
    public const int OutboundSelectorFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_outboundSelector_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> outboundSelector_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> OutboundSelector {
      get { return outboundSelector_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BalancingRule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BalancingRule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if(!outboundSelector_.Equals(other.outboundSelector_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      hash ^= outboundSelector_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tag);
      }
      outboundSelector_.WriteTo(output, _repeated_outboundSelector_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      size += outboundSelector_.CalculateSize(_repeated_outboundSelector_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BalancingRule other) {
      if (other == null) {
        return;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      outboundSelector_.Add(other.outboundSelector_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Tag = input.ReadString();
            break;
          }
          case 18: {
            outboundSelector_.AddEntriesFrom(input, _repeated_outboundSelector_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Router.ConfigReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      domainStrategy_ = other.domainStrategy_;
      rule_ = other.rule_.Clone();
      balancingRule_ = other.balancingRule_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "domain_strategy" field.</summary>
    public const int DomainStrategyFieldNumber = 1;
    private global::V2Ray.Core.App.Router.Config.Types.DomainStrategy domainStrategy_ = global::V2Ray.Core.App.Router.Config.Types.DomainStrategy.AsIs;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.App.Router.Config.Types.DomainStrategy DomainStrategy {
      get { return domainStrategy_; }
      set {
        domainStrategy_ = value;
      }
    }

    /// <summary>Field number for the "rule" field.</summary>
    public const int RuleFieldNumber = 2;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.RoutingRule> _repeated_rule_codec
        = pb::FieldCodec.ForMessage(18, global::V2Ray.Core.App.Router.RoutingRule.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.RoutingRule> rule_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.RoutingRule>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.RoutingRule> Rule {
      get { return rule_; }
    }

    /// <summary>Field number for the "balancing_rule" field.</summary>
    public const int BalancingRuleFieldNumber = 3;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.BalancingRule> _repeated_balancingRule_codec
        = pb::FieldCodec.ForMessage(26, global::V2Ray.Core.App.Router.BalancingRule.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.BalancingRule> balancingRule_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.BalancingRule>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.BalancingRule> BalancingRule {
      get { return balancingRule_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DomainStrategy != other.DomainStrategy) return false;
      if(!rule_.Equals(other.rule_)) return false;
      if(!balancingRule_.Equals(other.balancingRule_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DomainStrategy != global::V2Ray.Core.App.Router.Config.Types.DomainStrategy.AsIs) hash ^= DomainStrategy.GetHashCode();
      hash ^= rule_.GetHashCode();
      hash ^= balancingRule_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DomainStrategy != global::V2Ray.Core.App.Router.Config.Types.DomainStrategy.AsIs) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DomainStrategy);
      }
      rule_.WriteTo(output, _repeated_rule_codec);
      balancingRule_.WriteTo(output, _repeated_balancingRule_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DomainStrategy != global::V2Ray.Core.App.Router.Config.Types.DomainStrategy.AsIs) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DomainStrategy);
      }
      size += rule_.CalculateSize(_repeated_rule_codec);
      size += balancingRule_.CalculateSize(_repeated_balancingRule_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.DomainStrategy != global::V2Ray.Core.App.Router.Config.Types.DomainStrategy.AsIs) {
        DomainStrategy = other.DomainStrategy;
      }
      rule_.Add(other.rule_);
      balancingRule_.Add(other.balancingRule_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DomainStrategy = (global::V2Ray.Core.App.Router.Config.Types.DomainStrategy) input.ReadEnum();
            break;
          }
          case 18: {
            rule_.AddEntriesFrom(input, _repeated_rule_codec);
            break;
          }
          case 26: {
            balancingRule_.AddEntriesFrom(input, _repeated_balancingRule_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Config message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DomainStrategy {
        /// <summary>
        /// Use domain as is.
        /// </summary>
        [pbr::OriginalName("AsIs")] AsIs = 0,
        /// <summary>
        /// Always resolve IP for domains.
        /// </summary>
        [pbr::OriginalName("UseIp")] UseIp = 1,
        /// <summary>
        /// Resolve to IP if the domain doesn't match any rules.
        /// </summary>
        [pbr::OriginalName("IpIfNonMatch")] IpIfNonMatch = 2,
        /// <summary>
        /// Resolve to IP if any rule requires IP matching.
        /// </summary>
        [pbr::OriginalName("IpOnDemand")] IpOnDemand = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
