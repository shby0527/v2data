// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: app/policy/config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace V2Ray.Core.App.Policy {

  /// <summary>Holder for reflection information generated from app/policy/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for app/policy/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdhcHAvcG9saWN5L2NvbmZpZy5wcm90bxIVdjJyYXkuY29yZS5hcHAucG9s",
            "aWN5IhcKBlNlY29uZBINCgV2YWx1ZRgBIAEoDSLdAwoGUG9saWN5EjYKB3Rp",
            "bWVvdXQYASABKAsyJS52MnJheS5jb3JlLmFwcC5wb2xpY3kuUG9saWN5LlRp",
            "bWVvdXQSMgoFc3RhdHMYAiABKAsyIy52MnJheS5jb3JlLmFwcC5wb2xpY3ku",
            "UG9saWN5LlN0YXRzEjQKBmJ1ZmZlchgDIAEoCzIkLnYycmF5LmNvcmUuYXBw",
            "LnBvbGljeS5Qb2xpY3kuQnVmZmVyGt0BCgdUaW1lb3V0EjAKCWhhbmRzaGFr",
            "ZRgBIAEoCzIdLnYycmF5LmNvcmUuYXBwLnBvbGljeS5TZWNvbmQSNgoPY29u",
            "bmVjdGlvbl9pZGxlGAIgASgLMh0udjJyYXkuY29yZS5hcHAucG9saWN5LlNl",
            "Y29uZBIyCgt1cGxpbmtfb25seRgDIAEoCzIdLnYycmF5LmNvcmUuYXBwLnBv",
            "bGljeS5TZWNvbmQSNAoNZG93bmxpbmtfb25seRgEIAEoCzIdLnYycmF5LmNv",
            "cmUuYXBwLnBvbGljeS5TZWNvbmQaMwoFU3RhdHMSEwoLdXNlcl91cGxpbmsY",
            "ASABKAgSFQoNdXNlcl9kb3dubGluaxgCIAEoCBocCgZCdWZmZXISEgoKY29u",
            "bmVjdGlvbhgBIAEoBSKDAQoMU3lzdGVtUG9saWN5EjgKBXN0YXRzGAEgASgL",
            "MikudjJyYXkuY29yZS5hcHAucG9saWN5LlN5c3RlbVBvbGljeS5TdGF0cxo5",
            "CgVTdGF0cxIWCg5pbmJvdW5kX3VwbGluaxgBIAEoCBIYChBpbmJvdW5kX2Rv",
            "d25saW5rGAIgASgIIsMBCgZDb25maWcSNwoFbGV2ZWwYASADKAsyKC52MnJh",
            "eS5jb3JlLmFwcC5wb2xpY3kuQ29uZmlnLkxldmVsRW50cnkSMwoGc3lzdGVt",
            "GAIgASgLMiMudjJyYXkuY29yZS5hcHAucG9saWN5LlN5c3RlbVBvbGljeRpL",
            "CgpMZXZlbEVudHJ5EgsKA2tleRgBIAEoDRIsCgV2YWx1ZRgCIAEoCzIdLnYy",
            "cmF5LmNvcmUuYXBwLnBvbGljeS5Qb2xpY3k6AjgBQj0KGWNvbS52MnJheS5j",
            "b3JlLmFwcC5wb2xpY3lQAVoGcG9saWN5qgIVVjJSYXkuQ29yZS5BcHAuUG9s",
            "aWN5YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Policy.Second), global::V2Ray.Core.App.Policy.Second.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Policy.Policy), global::V2Ray.Core.App.Policy.Policy.Parser, new[]{ "Timeout", "Stats", "Buffer" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Policy.Policy.Types.Timeout), global::V2Ray.Core.App.Policy.Policy.Types.Timeout.Parser, new[]{ "Handshake", "ConnectionIdle", "UplinkOnly", "DownlinkOnly" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Policy.Policy.Types.Stats), global::V2Ray.Core.App.Policy.Policy.Types.Stats.Parser, new[]{ "UserUplink", "UserDownlink" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Policy.Policy.Types.Buffer), global::V2Ray.Core.App.Policy.Policy.Types.Buffer.Parser, new[]{ "Connection" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Policy.SystemPolicy), global::V2Ray.Core.App.Policy.SystemPolicy.Parser, new[]{ "Stats" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Policy.SystemPolicy.Types.Stats), global::V2Ray.Core.App.Policy.SystemPolicy.Types.Stats.Parser, new[]{ "InboundUplink", "InboundDownlink" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Policy.Config), global::V2Ray.Core.App.Policy.Config.Parser, new[]{ "Level", "System" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Second : pb::IMessage<Second> {
    private static readonly pb::MessageParser<Second> _parser = new pb::MessageParser<Second>(() => new Second());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Second> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Policy.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Second() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Second(Second other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Second Clone() {
      return new Second(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Second);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Second other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Second other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Policy : pb::IMessage<Policy> {
    private static readonly pb::MessageParser<Policy> _parser = new pb::MessageParser<Policy>(() => new Policy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Policy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Policy.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Policy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Policy(Policy other) : this() {
      timeout_ = other.timeout_ != null ? other.timeout_.Clone() : null;
      stats_ = other.stats_ != null ? other.stats_.Clone() : null;
      buffer_ = other.buffer_ != null ? other.buffer_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Policy Clone() {
      return new Policy(this);
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 1;
    private global::V2Ray.Core.App.Policy.Policy.Types.Timeout timeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.App.Policy.Policy.Types.Timeout Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 2;
    private global::V2Ray.Core.App.Policy.Policy.Types.Stats stats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.App.Policy.Policy.Types.Stats Stats {
      get { return stats_; }
      set {
        stats_ = value;
      }
    }

    /// <summary>Field number for the "buffer" field.</summary>
    public const int BufferFieldNumber = 3;
    private global::V2Ray.Core.App.Policy.Policy.Types.Buffer buffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.App.Policy.Policy.Types.Buffer Buffer {
      get { return buffer_; }
      set {
        buffer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Policy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Policy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timeout, other.Timeout)) return false;
      if (!object.Equals(Stats, other.Stats)) return false;
      if (!object.Equals(Buffer, other.Buffer)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timeout_ != null) hash ^= Timeout.GetHashCode();
      if (stats_ != null) hash ^= Stats.GetHashCode();
      if (buffer_ != null) hash ^= Buffer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timeout_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timeout);
      }
      if (stats_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Stats);
      }
      if (buffer_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Buffer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeout);
      }
      if (stats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stats);
      }
      if (buffer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Buffer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Policy other) {
      if (other == null) {
        return;
      }
      if (other.timeout_ != null) {
        if (timeout_ == null) {
          Timeout = new global::V2Ray.Core.App.Policy.Policy.Types.Timeout();
        }
        Timeout.MergeFrom(other.Timeout);
      }
      if (other.stats_ != null) {
        if (stats_ == null) {
          Stats = new global::V2Ray.Core.App.Policy.Policy.Types.Stats();
        }
        Stats.MergeFrom(other.Stats);
      }
      if (other.buffer_ != null) {
        if (buffer_ == null) {
          Buffer = new global::V2Ray.Core.App.Policy.Policy.Types.Buffer();
        }
        Buffer.MergeFrom(other.Buffer);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timeout_ == null) {
              Timeout = new global::V2Ray.Core.App.Policy.Policy.Types.Timeout();
            }
            input.ReadMessage(Timeout);
            break;
          }
          case 18: {
            if (stats_ == null) {
              Stats = new global::V2Ray.Core.App.Policy.Policy.Types.Stats();
            }
            input.ReadMessage(Stats);
            break;
          }
          case 26: {
            if (buffer_ == null) {
              Buffer = new global::V2Ray.Core.App.Policy.Policy.Types.Buffer();
            }
            input.ReadMessage(Buffer);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Policy message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Timeout is a message for timeout settings in various stages, in seconds.
      /// </summary>
      public sealed partial class Timeout : pb::IMessage<Timeout> {
        private static readonly pb::MessageParser<Timeout> _parser = new pb::MessageParser<Timeout>(() => new Timeout());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Timeout> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::V2Ray.Core.App.Policy.Policy.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Timeout() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Timeout(Timeout other) : this() {
          handshake_ = other.handshake_ != null ? other.handshake_.Clone() : null;
          connectionIdle_ = other.connectionIdle_ != null ? other.connectionIdle_.Clone() : null;
          uplinkOnly_ = other.uplinkOnly_ != null ? other.uplinkOnly_.Clone() : null;
          downlinkOnly_ = other.downlinkOnly_ != null ? other.downlinkOnly_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Timeout Clone() {
          return new Timeout(this);
        }

        /// <summary>Field number for the "handshake" field.</summary>
        public const int HandshakeFieldNumber = 1;
        private global::V2Ray.Core.App.Policy.Second handshake_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::V2Ray.Core.App.Policy.Second Handshake {
          get { return handshake_; }
          set {
            handshake_ = value;
          }
        }

        /// <summary>Field number for the "connection_idle" field.</summary>
        public const int ConnectionIdleFieldNumber = 2;
        private global::V2Ray.Core.App.Policy.Second connectionIdle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::V2Ray.Core.App.Policy.Second ConnectionIdle {
          get { return connectionIdle_; }
          set {
            connectionIdle_ = value;
          }
        }

        /// <summary>Field number for the "uplink_only" field.</summary>
        public const int UplinkOnlyFieldNumber = 3;
        private global::V2Ray.Core.App.Policy.Second uplinkOnly_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::V2Ray.Core.App.Policy.Second UplinkOnly {
          get { return uplinkOnly_; }
          set {
            uplinkOnly_ = value;
          }
        }

        /// <summary>Field number for the "downlink_only" field.</summary>
        public const int DownlinkOnlyFieldNumber = 4;
        private global::V2Ray.Core.App.Policy.Second downlinkOnly_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::V2Ray.Core.App.Policy.Second DownlinkOnly {
          get { return downlinkOnly_; }
          set {
            downlinkOnly_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Timeout);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Timeout other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Handshake, other.Handshake)) return false;
          if (!object.Equals(ConnectionIdle, other.ConnectionIdle)) return false;
          if (!object.Equals(UplinkOnly, other.UplinkOnly)) return false;
          if (!object.Equals(DownlinkOnly, other.DownlinkOnly)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (handshake_ != null) hash ^= Handshake.GetHashCode();
          if (connectionIdle_ != null) hash ^= ConnectionIdle.GetHashCode();
          if (uplinkOnly_ != null) hash ^= UplinkOnly.GetHashCode();
          if (downlinkOnly_ != null) hash ^= DownlinkOnly.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (handshake_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Handshake);
          }
          if (connectionIdle_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ConnectionIdle);
          }
          if (uplinkOnly_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(UplinkOnly);
          }
          if (downlinkOnly_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(DownlinkOnly);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (handshake_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Handshake);
          }
          if (connectionIdle_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectionIdle);
          }
          if (uplinkOnly_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(UplinkOnly);
          }
          if (downlinkOnly_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DownlinkOnly);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Timeout other) {
          if (other == null) {
            return;
          }
          if (other.handshake_ != null) {
            if (handshake_ == null) {
              Handshake = new global::V2Ray.Core.App.Policy.Second();
            }
            Handshake.MergeFrom(other.Handshake);
          }
          if (other.connectionIdle_ != null) {
            if (connectionIdle_ == null) {
              ConnectionIdle = new global::V2Ray.Core.App.Policy.Second();
            }
            ConnectionIdle.MergeFrom(other.ConnectionIdle);
          }
          if (other.uplinkOnly_ != null) {
            if (uplinkOnly_ == null) {
              UplinkOnly = new global::V2Ray.Core.App.Policy.Second();
            }
            UplinkOnly.MergeFrom(other.UplinkOnly);
          }
          if (other.downlinkOnly_ != null) {
            if (downlinkOnly_ == null) {
              DownlinkOnly = new global::V2Ray.Core.App.Policy.Second();
            }
            DownlinkOnly.MergeFrom(other.DownlinkOnly);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (handshake_ == null) {
                  Handshake = new global::V2Ray.Core.App.Policy.Second();
                }
                input.ReadMessage(Handshake);
                break;
              }
              case 18: {
                if (connectionIdle_ == null) {
                  ConnectionIdle = new global::V2Ray.Core.App.Policy.Second();
                }
                input.ReadMessage(ConnectionIdle);
                break;
              }
              case 26: {
                if (uplinkOnly_ == null) {
                  UplinkOnly = new global::V2Ray.Core.App.Policy.Second();
                }
                input.ReadMessage(UplinkOnly);
                break;
              }
              case 34: {
                if (downlinkOnly_ == null) {
                  DownlinkOnly = new global::V2Ray.Core.App.Policy.Second();
                }
                input.ReadMessage(DownlinkOnly);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Stats : pb::IMessage<Stats> {
        private static readonly pb::MessageParser<Stats> _parser = new pb::MessageParser<Stats>(() => new Stats());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Stats> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::V2Ray.Core.App.Policy.Policy.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Stats() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Stats(Stats other) : this() {
          userUplink_ = other.userUplink_;
          userDownlink_ = other.userDownlink_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Stats Clone() {
          return new Stats(this);
        }

        /// <summary>Field number for the "user_uplink" field.</summary>
        public const int UserUplinkFieldNumber = 1;
        private bool userUplink_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool UserUplink {
          get { return userUplink_; }
          set {
            userUplink_ = value;
          }
        }

        /// <summary>Field number for the "user_downlink" field.</summary>
        public const int UserDownlinkFieldNumber = 2;
        private bool userDownlink_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool UserDownlink {
          get { return userDownlink_; }
          set {
            userDownlink_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Stats);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Stats other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UserUplink != other.UserUplink) return false;
          if (UserDownlink != other.UserDownlink) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (UserUplink != false) hash ^= UserUplink.GetHashCode();
          if (UserDownlink != false) hash ^= UserDownlink.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (UserUplink != false) {
            output.WriteRawTag(8);
            output.WriteBool(UserUplink);
          }
          if (UserDownlink != false) {
            output.WriteRawTag(16);
            output.WriteBool(UserDownlink);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (UserUplink != false) {
            size += 1 + 1;
          }
          if (UserDownlink != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Stats other) {
          if (other == null) {
            return;
          }
          if (other.UserUplink != false) {
            UserUplink = other.UserUplink;
          }
          if (other.UserDownlink != false) {
            UserDownlink = other.UserDownlink;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                UserUplink = input.ReadBool();
                break;
              }
              case 16: {
                UserDownlink = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Buffer : pb::IMessage<Buffer> {
        private static readonly pb::MessageParser<Buffer> _parser = new pb::MessageParser<Buffer>(() => new Buffer());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Buffer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::V2Ray.Core.App.Policy.Policy.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Buffer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Buffer(Buffer other) : this() {
          connection_ = other.connection_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Buffer Clone() {
          return new Buffer(this);
        }

        /// <summary>Field number for the "connection" field.</summary>
        public const int ConnectionFieldNumber = 1;
        private int connection_;
        /// <summary>
        /// Buffer size per connection, in bytes. -1 for unlimited buffer.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Connection {
          get { return connection_; }
          set {
            connection_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Buffer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Buffer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Connection != other.Connection) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Connection != 0) hash ^= Connection.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Connection != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Connection);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Connection != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Connection);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Buffer other) {
          if (other == null) {
            return;
          }
          if (other.Connection != 0) {
            Connection = other.Connection;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Connection = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SystemPolicy : pb::IMessage<SystemPolicy> {
    private static readonly pb::MessageParser<SystemPolicy> _parser = new pb::MessageParser<SystemPolicy>(() => new SystemPolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemPolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Policy.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemPolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemPolicy(SystemPolicy other) : this() {
      stats_ = other.stats_ != null ? other.stats_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemPolicy Clone() {
      return new SystemPolicy(this);
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 1;
    private global::V2Ray.Core.App.Policy.SystemPolicy.Types.Stats stats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.App.Policy.SystemPolicy.Types.Stats Stats {
      get { return stats_; }
      set {
        stats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SystemPolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SystemPolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Stats, other.Stats)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stats_ != null) hash ^= Stats.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stats_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stats);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SystemPolicy other) {
      if (other == null) {
        return;
      }
      if (other.stats_ != null) {
        if (stats_ == null) {
          Stats = new global::V2Ray.Core.App.Policy.SystemPolicy.Types.Stats();
        }
        Stats.MergeFrom(other.Stats);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (stats_ == null) {
              Stats = new global::V2Ray.Core.App.Policy.SystemPolicy.Types.Stats();
            }
            input.ReadMessage(Stats);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SystemPolicy message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Stats : pb::IMessage<Stats> {
        private static readonly pb::MessageParser<Stats> _parser = new pb::MessageParser<Stats>(() => new Stats());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Stats> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::V2Ray.Core.App.Policy.SystemPolicy.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Stats() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Stats(Stats other) : this() {
          inboundUplink_ = other.inboundUplink_;
          inboundDownlink_ = other.inboundDownlink_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Stats Clone() {
          return new Stats(this);
        }

        /// <summary>Field number for the "inbound_uplink" field.</summary>
        public const int InboundUplinkFieldNumber = 1;
        private bool inboundUplink_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool InboundUplink {
          get { return inboundUplink_; }
          set {
            inboundUplink_ = value;
          }
        }

        /// <summary>Field number for the "inbound_downlink" field.</summary>
        public const int InboundDownlinkFieldNumber = 2;
        private bool inboundDownlink_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool InboundDownlink {
          get { return inboundDownlink_; }
          set {
            inboundDownlink_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Stats);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Stats other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (InboundUplink != other.InboundUplink) return false;
          if (InboundDownlink != other.InboundDownlink) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (InboundUplink != false) hash ^= InboundUplink.GetHashCode();
          if (InboundDownlink != false) hash ^= InboundDownlink.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InboundUplink != false) {
            output.WriteRawTag(8);
            output.WriteBool(InboundUplink);
          }
          if (InboundDownlink != false) {
            output.WriteRawTag(16);
            output.WriteBool(InboundDownlink);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InboundUplink != false) {
            size += 1 + 1;
          }
          if (InboundDownlink != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Stats other) {
          if (other == null) {
            return;
          }
          if (other.InboundUplink != false) {
            InboundUplink = other.InboundUplink;
          }
          if (other.InboundDownlink != false) {
            InboundDownlink = other.InboundDownlink;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                InboundUplink = input.ReadBool();
                break;
              }
              case 16: {
                InboundDownlink = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Policy.ConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      level_ = other.level_.Clone();
      system_ = other.system_ != null ? other.system_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private static readonly pbc::MapField<uint, global::V2Ray.Core.App.Policy.Policy>.Codec _map_level_codec
        = new pbc::MapField<uint, global::V2Ray.Core.App.Policy.Policy>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::V2Ray.Core.App.Policy.Policy.Parser), 10);
    private readonly pbc::MapField<uint, global::V2Ray.Core.App.Policy.Policy> level_ = new pbc::MapField<uint, global::V2Ray.Core.App.Policy.Policy>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::V2Ray.Core.App.Policy.Policy> Level {
      get { return level_; }
    }

    /// <summary>Field number for the "system" field.</summary>
    public const int SystemFieldNumber = 2;
    private global::V2Ray.Core.App.Policy.SystemPolicy system_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.App.Policy.SystemPolicy System {
      get { return system_; }
      set {
        system_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Level.Equals(other.Level)) return false;
      if (!object.Equals(System, other.System)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Level.GetHashCode();
      if (system_ != null) hash ^= System.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      level_.WriteTo(output, _map_level_codec);
      if (system_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(System);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += level_.CalculateSize(_map_level_codec);
      if (system_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(System);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      level_.Add(other.level_);
      if (other.system_ != null) {
        if (system_ == null) {
          System = new global::V2Ray.Core.App.Policy.SystemPolicy();
        }
        System.MergeFrom(other.System);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            level_.AddEntriesFrom(input, _map_level_codec);
            break;
          }
          case 18: {
            if (system_ == null) {
              System = new global::V2Ray.Core.App.Policy.SystemPolicy();
            }
            input.ReadMessage(System);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
