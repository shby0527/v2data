// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: app/proxyman/config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace V2Ray.Core.App.Proxyman {

  /// <summary>Holder for reflection information generated from app/proxyman/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for app/proxyman/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlhcHAvcHJveHltYW4vY29uZmlnLnByb3RvEhd2MnJheS5jb3JlLmFwcC5w",
            "cm94eW1hbhondjJyYXkuY29tL2NvcmUvY29tbW9uL25ldC9hZGRyZXNzLnBy",
            "b3RvGiR2MnJheS5jb20vY29yZS9jb21tb24vbmV0L3BvcnQucHJvdG8aLnYy",
            "cmF5LmNvbS9jb3JlL3RyYW5zcG9ydC9pbnRlcm5ldC9jb25maWcucHJvdG8a",
            "MHYycmF5LmNvbS9jb3JlL2NvbW1vbi9zZXJpYWwvdHlwZWRfbWVzc2FnZS5w",
            "cm90byIPCg1JbmJvdW5kQ29uZmlnIpYDChJBbGxvY2F0aW9uU3RyYXRlZ3kS",
            "PgoEdHlwZRgBIAEoDjIwLnYycmF5LmNvcmUuYXBwLnByb3h5bWFuLkFsbG9j",
            "YXRpb25TdHJhdGVneS5UeXBlEl4KC2NvbmN1cnJlbmN5GAIgASgLMkkudjJy",
            "YXkuY29yZS5hcHAucHJveHltYW4uQWxsb2NhdGlvblN0cmF0ZWd5LkFsbG9j",
            "YXRpb25TdHJhdGVneUNvbmN1cnJlbmN5ElYKB3JlZnJlc2gYAyABKAsyRS52",
            "MnJheS5jb3JlLmFwcC5wcm94eW1hbi5BbGxvY2F0aW9uU3RyYXRlZ3kuQWxs",
            "b2NhdGlvblN0cmF0ZWd5UmVmcmVzaBouCh1BbGxvY2F0aW9uU3RyYXRlZ3lD",
            "b25jdXJyZW5jeRINCgV2YWx1ZRgBIAEoDRoqChlBbGxvY2F0aW9uU3RyYXRl",
            "Z3lSZWZyZXNoEg0KBXZhbHVlGAEgASgNIiwKBFR5cGUSCgoGQWx3YXlzEAAS",
            "CgoGUmFuZG9tEAESDAoIRXh0ZXJuYWwQAiI/Cg5TbmlmZmluZ0NvbmZpZxIP",
            "CgdlbmFibGVkGAEgASgIEhwKFGRlc3RpbmF0aW9uX292ZXJyaWRlGAIgAygJ",
            "Ir8DCg5SZWNlaXZlckNvbmZpZxI0Cgpwb3J0X3JhbmdlGAEgASgLMiAudjJy",
            "YXkuY29yZS5jb21tb24ubmV0LlBvcnRSYW5nZRIxCgZsaXN0ZW4YAiABKAsy",
            "IS52MnJheS5jb3JlLmNvbW1vbi5uZXQuSVBPckRvbWFpbhJIChNhbGxvY2F0",
            "aW9uX3N0cmF0ZWd5GAMgASgLMisudjJyYXkuY29yZS5hcHAucHJveHltYW4u",
            "QWxsb2NhdGlvblN0cmF0ZWd5EkQKD3N0cmVhbV9zZXR0aW5ncxgEIAEoCzIr",
            "LnYycmF5LmNvcmUudHJhbnNwb3J0LmludGVybmV0LlN0cmVhbUNvbmZpZxIk",
            "ChxyZWNlaXZlX29yaWdpbmFsX2Rlc3RpbmF0aW9uGAUgASgIEkQKD2RvbWFp",
            "bl9vdmVycmlkZRgHIAMoDjInLnYycmF5LmNvcmUuYXBwLnByb3h5bWFuLktu",
            "b3duUHJvdG9jb2xzQgIYARJCChFzbmlmZmluZ19zZXR0aW5ncxgIIAEoCzIn",
            "LnYycmF5LmNvcmUuYXBwLnByb3h5bWFuLlNuaWZmaW5nQ29uZmlnSgQIBhAH",
            "IqYBChRJbmJvdW5kSGFuZGxlckNvbmZpZxILCgN0YWcYASABKAkSQQoRcmVj",
            "ZWl2ZXJfc2V0dGluZ3MYAiABKAsyJi52MnJheS5jb3JlLmNvbW1vbi5zZXJp",
            "YWwuVHlwZWRNZXNzYWdlEj4KDnByb3h5X3NldHRpbmdzGAMgASgLMiYudjJy",
            "YXkuY29yZS5jb21tb24uc2VyaWFsLlR5cGVkTWVzc2FnZSIQCg5PdXRib3Vu",
            "ZENvbmZpZyKRAgoMU2VuZGVyQ29uZmlnEi4KA3ZpYRgBIAEoCzIhLnYycmF5",
            "LmNvcmUuY29tbW9uLm5ldC5JUE9yRG9tYWluEkQKD3N0cmVhbV9zZXR0aW5n",
            "cxgCIAEoCzIrLnYycmF5LmNvcmUudHJhbnNwb3J0LmludGVybmV0LlN0cmVh",
            "bUNvbmZpZxJCCg5wcm94eV9zZXR0aW5ncxgDIAEoCzIqLnYycmF5LmNvcmUu",
            "dHJhbnNwb3J0LmludGVybmV0LlByb3h5Q29uZmlnEkcKEm11bHRpcGxleF9z",
            "ZXR0aW5ncxgEIAEoCzIrLnYycmF5LmNvcmUuYXBwLnByb3h5bWFuLk11bHRp",
            "cGxleGluZ0NvbmZpZyI6ChJNdWx0aXBsZXhpbmdDb25maWcSDwoHZW5hYmxl",
            "ZBgBIAEoCBITCgtjb25jdXJyZW5jeRgCIAEoDSojCg5Lbm93blByb3RvY29s",
            "cxIICgRIVFRQEAASBwoDVExTEAFCQwobY29tLnYycmF5LmNvcmUuYXBwLnBy",
            "b3h5bWFuUAFaCHByb3h5bWFuqgIXVjJSYXkuQ29yZS5BcHAuUHJveHltYW5i",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::V2Ray.Core.Common.Net.AddressReflection.Descriptor, global::V2Ray.Core.Common.Net.PortReflection.Descriptor, global::V2Ray.Core.Transport.Internet.ConfigReflection.Descriptor, global::V2Ray.Core.Common.Serial.TypedMessageReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::V2Ray.Core.App.Proxyman.KnownProtocols), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Proxyman.InboundConfig), global::V2Ray.Core.App.Proxyman.InboundConfig.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Proxyman.AllocationStrategy), global::V2Ray.Core.App.Proxyman.AllocationStrategy.Parser, new[]{ "Type", "Concurrency", "Refresh" }, null, new[]{ typeof(global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.Type) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.AllocationStrategyConcurrency), global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.AllocationStrategyConcurrency.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.AllocationStrategyRefresh), global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.AllocationStrategyRefresh.Parser, new[]{ "Value" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Proxyman.SniffingConfig), global::V2Ray.Core.App.Proxyman.SniffingConfig.Parser, new[]{ "Enabled", "DestinationOverride" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Proxyman.ReceiverConfig), global::V2Ray.Core.App.Proxyman.ReceiverConfig.Parser, new[]{ "PortRange", "Listen", "AllocationStrategy", "StreamSettings", "ReceiveOriginalDestination", "DomainOverride", "SniffingSettings" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Proxyman.InboundHandlerConfig), global::V2Ray.Core.App.Proxyman.InboundHandlerConfig.Parser, new[]{ "Tag", "ReceiverSettings", "ProxySettings" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Proxyman.OutboundConfig), global::V2Ray.Core.App.Proxyman.OutboundConfig.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Proxyman.SenderConfig), global::V2Ray.Core.App.Proxyman.SenderConfig.Parser, new[]{ "Via", "StreamSettings", "ProxySettings", "MultiplexSettings" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Proxyman.MultiplexingConfig), global::V2Ray.Core.App.Proxyman.MultiplexingConfig.Parser, new[]{ "Enabled", "Concurrency" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum KnownProtocols {
    [pbr::OriginalName("HTTP")] Http = 0,
    [pbr::OriginalName("TLS")] Tls = 1,
  }

  #endregion

  #region Messages
  public sealed partial class InboundConfig : pb::IMessage<InboundConfig> {
    private static readonly pb::MessageParser<InboundConfig> _parser = new pb::MessageParser<InboundConfig>(() => new InboundConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InboundConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Proxyman.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InboundConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InboundConfig(InboundConfig other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InboundConfig Clone() {
      return new InboundConfig(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InboundConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InboundConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InboundConfig other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class AllocationStrategy : pb::IMessage<AllocationStrategy> {
    private static readonly pb::MessageParser<AllocationStrategy> _parser = new pb::MessageParser<AllocationStrategy>(() => new AllocationStrategy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllocationStrategy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Proxyman.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocationStrategy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocationStrategy(AllocationStrategy other) : this() {
      type_ = other.type_;
      concurrency_ = other.concurrency_ != null ? other.concurrency_.Clone() : null;
      refresh_ = other.refresh_ != null ? other.refresh_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocationStrategy Clone() {
      return new AllocationStrategy(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.Type type_ = global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.Type.Always;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "concurrency" field.</summary>
    public const int ConcurrencyFieldNumber = 2;
    private global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.AllocationStrategyConcurrency concurrency_;
    /// <summary>
    /// Number of handlers (ports) running in parallel.
    /// Default value is 3 if unset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.AllocationStrategyConcurrency Concurrency {
      get { return concurrency_; }
      set {
        concurrency_ = value;
      }
    }

    /// <summary>Field number for the "refresh" field.</summary>
    public const int RefreshFieldNumber = 3;
    private global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.AllocationStrategyRefresh refresh_;
    /// <summary>
    /// Number of minutes before a handler is regenerated.
    /// Default value is 5 if unset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.AllocationStrategyRefresh Refresh {
      get { return refresh_; }
      set {
        refresh_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllocationStrategy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllocationStrategy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Concurrency, other.Concurrency)) return false;
      if (!object.Equals(Refresh, other.Refresh)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.Type.Always) hash ^= Type.GetHashCode();
      if (concurrency_ != null) hash ^= Concurrency.GetHashCode();
      if (refresh_ != null) hash ^= Refresh.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.Type.Always) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (concurrency_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Concurrency);
      }
      if (refresh_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Refresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.Type.Always) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (concurrency_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Concurrency);
      }
      if (refresh_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Refresh);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllocationStrategy other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.Type.Always) {
        Type = other.Type;
      }
      if (other.concurrency_ != null) {
        if (concurrency_ == null) {
          Concurrency = new global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.AllocationStrategyConcurrency();
        }
        Concurrency.MergeFrom(other.Concurrency);
      }
      if (other.refresh_ != null) {
        if (refresh_ == null) {
          Refresh = new global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.AllocationStrategyRefresh();
        }
        Refresh.MergeFrom(other.Refresh);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            if (concurrency_ == null) {
              Concurrency = new global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.AllocationStrategyConcurrency();
            }
            input.ReadMessage(Concurrency);
            break;
          }
          case 26: {
            if (refresh_ == null) {
              Refresh = new global::V2Ray.Core.App.Proxyman.AllocationStrategy.Types.AllocationStrategyRefresh();
            }
            input.ReadMessage(Refresh);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AllocationStrategy message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        /// <summary>
        /// Always allocate all connection handlers.
        /// </summary>
        [pbr::OriginalName("Always")] Always = 0,
        /// <summary>
        /// Randomly allocate specific range of handlers.
        /// </summary>
        [pbr::OriginalName("Random")] Random = 1,
        /// <summary>
        /// External. Not supported yet.
        /// </summary>
        [pbr::OriginalName("External")] External = 2,
      }

      public sealed partial class AllocationStrategyConcurrency : pb::IMessage<AllocationStrategyConcurrency> {
        private static readonly pb::MessageParser<AllocationStrategyConcurrency> _parser = new pb::MessageParser<AllocationStrategyConcurrency>(() => new AllocationStrategyConcurrency());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AllocationStrategyConcurrency> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::V2Ray.Core.App.Proxyman.AllocationStrategy.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AllocationStrategyConcurrency() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AllocationStrategyConcurrency(AllocationStrategyConcurrency other) : this() {
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AllocationStrategyConcurrency Clone() {
          return new AllocationStrategyConcurrency(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private uint value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AllocationStrategyConcurrency);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AllocationStrategyConcurrency other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Value != 0) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Value != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Value != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AllocationStrategyConcurrency other) {
          if (other == null) {
            return;
          }
          if (other.Value != 0) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Value = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class AllocationStrategyRefresh : pb::IMessage<AllocationStrategyRefresh> {
        private static readonly pb::MessageParser<AllocationStrategyRefresh> _parser = new pb::MessageParser<AllocationStrategyRefresh>(() => new AllocationStrategyRefresh());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AllocationStrategyRefresh> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::V2Ray.Core.App.Proxyman.AllocationStrategy.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AllocationStrategyRefresh() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AllocationStrategyRefresh(AllocationStrategyRefresh other) : this() {
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AllocationStrategyRefresh Clone() {
          return new AllocationStrategyRefresh(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private uint value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AllocationStrategyRefresh);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AllocationStrategyRefresh other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Value != 0) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Value != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Value != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AllocationStrategyRefresh other) {
          if (other == null) {
            return;
          }
          if (other.Value != 0) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Value = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SniffingConfig : pb::IMessage<SniffingConfig> {
    private static readonly pb::MessageParser<SniffingConfig> _parser = new pb::MessageParser<SniffingConfig>(() => new SniffingConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SniffingConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Proxyman.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SniffingConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SniffingConfig(SniffingConfig other) : this() {
      enabled_ = other.enabled_;
      destinationOverride_ = other.destinationOverride_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SniffingConfig Clone() {
      return new SniffingConfig(this);
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 1;
    private bool enabled_;
    /// <summary>
    /// Whether or not to enable content sniffing on an inbound connection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "destination_override" field.</summary>
    public const int DestinationOverrideFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_destinationOverride_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> destinationOverride_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Override target destination if sniff'ed protocol is in the given list.
    /// Supported values are "http", "tls".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DestinationOverride {
      get { return destinationOverride_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SniffingConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SniffingConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enabled != other.Enabled) return false;
      if(!destinationOverride_.Equals(other.destinationOverride_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      hash ^= destinationOverride_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enabled);
      }
      destinationOverride_.WriteTo(output, _repeated_destinationOverride_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enabled != false) {
        size += 1 + 1;
      }
      size += destinationOverride_.CalculateSize(_repeated_destinationOverride_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SniffingConfig other) {
      if (other == null) {
        return;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      destinationOverride_.Add(other.destinationOverride_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enabled = input.ReadBool();
            break;
          }
          case 18: {
            destinationOverride_.AddEntriesFrom(input, _repeated_destinationOverride_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReceiverConfig : pb::IMessage<ReceiverConfig> {
    private static readonly pb::MessageParser<ReceiverConfig> _parser = new pb::MessageParser<ReceiverConfig>(() => new ReceiverConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceiverConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Proxyman.ConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiverConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiverConfig(ReceiverConfig other) : this() {
      portRange_ = other.portRange_ != null ? other.portRange_.Clone() : null;
      listen_ = other.listen_ != null ? other.listen_.Clone() : null;
      allocationStrategy_ = other.allocationStrategy_ != null ? other.allocationStrategy_.Clone() : null;
      streamSettings_ = other.streamSettings_ != null ? other.streamSettings_.Clone() : null;
      receiveOriginalDestination_ = other.receiveOriginalDestination_;
      domainOverride_ = other.domainOverride_.Clone();
      sniffingSettings_ = other.sniffingSettings_ != null ? other.sniffingSettings_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiverConfig Clone() {
      return new ReceiverConfig(this);
    }

    /// <summary>Field number for the "port_range" field.</summary>
    public const int PortRangeFieldNumber = 1;
    private global::V2Ray.Core.Common.Net.PortRange portRange_;
    /// <summary>
    /// PortRange specifies the ports which the Receiver should listen on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Net.PortRange PortRange {
      get { return portRange_; }
      set {
        portRange_ = value;
      }
    }

    /// <summary>Field number for the "listen" field.</summary>
    public const int ListenFieldNumber = 2;
    private global::V2Ray.Core.Common.Net.IPOrDomain listen_;
    /// <summary>
    /// Listen specifies the IP address that the Receiver should listen on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Net.IPOrDomain Listen {
      get { return listen_; }
      set {
        listen_ = value;
      }
    }

    /// <summary>Field number for the "allocation_strategy" field.</summary>
    public const int AllocationStrategyFieldNumber = 3;
    private global::V2Ray.Core.App.Proxyman.AllocationStrategy allocationStrategy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.App.Proxyman.AllocationStrategy AllocationStrategy {
      get { return allocationStrategy_; }
      set {
        allocationStrategy_ = value;
      }
    }

    /// <summary>Field number for the "stream_settings" field.</summary>
    public const int StreamSettingsFieldNumber = 4;
    private global::V2Ray.Core.Transport.Internet.StreamConfig streamSettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Transport.Internet.StreamConfig StreamSettings {
      get { return streamSettings_; }
      set {
        streamSettings_ = value;
      }
    }

    /// <summary>Field number for the "receive_original_destination" field.</summary>
    public const int ReceiveOriginalDestinationFieldNumber = 5;
    private bool receiveOriginalDestination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReceiveOriginalDestination {
      get { return receiveOriginalDestination_; }
      set {
        receiveOriginalDestination_ = value;
      }
    }

    /// <summary>Field number for the "domain_override" field.</summary>
    public const int DomainOverrideFieldNumber = 7;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Proxyman.KnownProtocols> _repeated_domainOverride_codec
        = pb::FieldCodec.ForEnum(58, x => (int) x, x => (global::V2Ray.Core.App.Proxyman.KnownProtocols) x);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Proxyman.KnownProtocols> domainOverride_ = new pbc::RepeatedField<global::V2Ray.Core.App.Proxyman.KnownProtocols>();
    /// <summary>
    /// Override domains for the given protocol.
    /// Deprecated. Use sniffing_settings.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Proxyman.KnownProtocols> DomainOverride {
      get { return domainOverride_; }
    }

    /// <summary>Field number for the "sniffing_settings" field.</summary>
    public const int SniffingSettingsFieldNumber = 8;
    private global::V2Ray.Core.App.Proxyman.SniffingConfig sniffingSettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.App.Proxyman.SniffingConfig SniffingSettings {
      get { return sniffingSettings_; }
      set {
        sniffingSettings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceiverConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceiverConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PortRange, other.PortRange)) return false;
      if (!object.Equals(Listen, other.Listen)) return false;
      if (!object.Equals(AllocationStrategy, other.AllocationStrategy)) return false;
      if (!object.Equals(StreamSettings, other.StreamSettings)) return false;
      if (ReceiveOriginalDestination != other.ReceiveOriginalDestination) return false;
      if(!domainOverride_.Equals(other.domainOverride_)) return false;
      if (!object.Equals(SniffingSettings, other.SniffingSettings)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (portRange_ != null) hash ^= PortRange.GetHashCode();
      if (listen_ != null) hash ^= Listen.GetHashCode();
      if (allocationStrategy_ != null) hash ^= AllocationStrategy.GetHashCode();
      if (streamSettings_ != null) hash ^= StreamSettings.GetHashCode();
      if (ReceiveOriginalDestination != false) hash ^= ReceiveOriginalDestination.GetHashCode();
      hash ^= domainOverride_.GetHashCode();
      if (sniffingSettings_ != null) hash ^= SniffingSettings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (portRange_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PortRange);
      }
      if (listen_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Listen);
      }
      if (allocationStrategy_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AllocationStrategy);
      }
      if (streamSettings_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(StreamSettings);
      }
      if (ReceiveOriginalDestination != false) {
        output.WriteRawTag(40);
        output.WriteBool(ReceiveOriginalDestination);
      }
      domainOverride_.WriteTo(output, _repeated_domainOverride_codec);
      if (sniffingSettings_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SniffingSettings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (portRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortRange);
      }
      if (listen_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Listen);
      }
      if (allocationStrategy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AllocationStrategy);
      }
      if (streamSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StreamSettings);
      }
      if (ReceiveOriginalDestination != false) {
        size += 1 + 1;
      }
      size += domainOverride_.CalculateSize(_repeated_domainOverride_codec);
      if (sniffingSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SniffingSettings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceiverConfig other) {
      if (other == null) {
        return;
      }
      if (other.portRange_ != null) {
        if (portRange_ == null) {
          PortRange = new global::V2Ray.Core.Common.Net.PortRange();
        }
        PortRange.MergeFrom(other.PortRange);
      }
      if (other.listen_ != null) {
        if (listen_ == null) {
          Listen = new global::V2Ray.Core.Common.Net.IPOrDomain();
        }
        Listen.MergeFrom(other.Listen);
      }
      if (other.allocationStrategy_ != null) {
        if (allocationStrategy_ == null) {
          AllocationStrategy = new global::V2Ray.Core.App.Proxyman.AllocationStrategy();
        }
        AllocationStrategy.MergeFrom(other.AllocationStrategy);
      }
      if (other.streamSettings_ != null) {
        if (streamSettings_ == null) {
          StreamSettings = new global::V2Ray.Core.Transport.Internet.StreamConfig();
        }
        StreamSettings.MergeFrom(other.StreamSettings);
      }
      if (other.ReceiveOriginalDestination != false) {
        ReceiveOriginalDestination = other.ReceiveOriginalDestination;
      }
      domainOverride_.Add(other.domainOverride_);
      if (other.sniffingSettings_ != null) {
        if (sniffingSettings_ == null) {
          SniffingSettings = new global::V2Ray.Core.App.Proxyman.SniffingConfig();
        }
        SniffingSettings.MergeFrom(other.SniffingSettings);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (portRange_ == null) {
              PortRange = new global::V2Ray.Core.Common.Net.PortRange();
            }
            input.ReadMessage(PortRange);
            break;
          }
          case 18: {
            if (listen_ == null) {
              Listen = new global::V2Ray.Core.Common.Net.IPOrDomain();
            }
            input.ReadMessage(Listen);
            break;
          }
          case 26: {
            if (allocationStrategy_ == null) {
              AllocationStrategy = new global::V2Ray.Core.App.Proxyman.AllocationStrategy();
            }
            input.ReadMessage(AllocationStrategy);
            break;
          }
          case 34: {
            if (streamSettings_ == null) {
              StreamSettings = new global::V2Ray.Core.Transport.Internet.StreamConfig();
            }
            input.ReadMessage(StreamSettings);
            break;
          }
          case 40: {
            ReceiveOriginalDestination = input.ReadBool();
            break;
          }
          case 58:
          case 56: {
            domainOverride_.AddEntriesFrom(input, _repeated_domainOverride_codec);
            break;
          }
          case 66: {
            if (sniffingSettings_ == null) {
              SniffingSettings = new global::V2Ray.Core.App.Proxyman.SniffingConfig();
            }
            input.ReadMessage(SniffingSettings);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InboundHandlerConfig : pb::IMessage<InboundHandlerConfig> {
    private static readonly pb::MessageParser<InboundHandlerConfig> _parser = new pb::MessageParser<InboundHandlerConfig>(() => new InboundHandlerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InboundHandlerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Proxyman.ConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InboundHandlerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InboundHandlerConfig(InboundHandlerConfig other) : this() {
      tag_ = other.tag_;
      receiverSettings_ = other.receiverSettings_ != null ? other.receiverSettings_.Clone() : null;
      proxySettings_ = other.proxySettings_ != null ? other.proxySettings_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InboundHandlerConfig Clone() {
      return new InboundHandlerConfig(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private string tag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "receiver_settings" field.</summary>
    public const int ReceiverSettingsFieldNumber = 2;
    private global::V2Ray.Core.Common.Serial.TypedMessage receiverSettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Serial.TypedMessage ReceiverSettings {
      get { return receiverSettings_; }
      set {
        receiverSettings_ = value;
      }
    }

    /// <summary>Field number for the "proxy_settings" field.</summary>
    public const int ProxySettingsFieldNumber = 3;
    private global::V2Ray.Core.Common.Serial.TypedMessage proxySettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Serial.TypedMessage ProxySettings {
      get { return proxySettings_; }
      set {
        proxySettings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InboundHandlerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InboundHandlerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (!object.Equals(ReceiverSettings, other.ReceiverSettings)) return false;
      if (!object.Equals(ProxySettings, other.ProxySettings)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (receiverSettings_ != null) hash ^= ReceiverSettings.GetHashCode();
      if (proxySettings_ != null) hash ^= ProxySettings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tag);
      }
      if (receiverSettings_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ReceiverSettings);
      }
      if (proxySettings_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ProxySettings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (receiverSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReceiverSettings);
      }
      if (proxySettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProxySettings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InboundHandlerConfig other) {
      if (other == null) {
        return;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      if (other.receiverSettings_ != null) {
        if (receiverSettings_ == null) {
          ReceiverSettings = new global::V2Ray.Core.Common.Serial.TypedMessage();
        }
        ReceiverSettings.MergeFrom(other.ReceiverSettings);
      }
      if (other.proxySettings_ != null) {
        if (proxySettings_ == null) {
          ProxySettings = new global::V2Ray.Core.Common.Serial.TypedMessage();
        }
        ProxySettings.MergeFrom(other.ProxySettings);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Tag = input.ReadString();
            break;
          }
          case 18: {
            if (receiverSettings_ == null) {
              ReceiverSettings = new global::V2Ray.Core.Common.Serial.TypedMessage();
            }
            input.ReadMessage(ReceiverSettings);
            break;
          }
          case 26: {
            if (proxySettings_ == null) {
              ProxySettings = new global::V2Ray.Core.Common.Serial.TypedMessage();
            }
            input.ReadMessage(ProxySettings);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OutboundConfig : pb::IMessage<OutboundConfig> {
    private static readonly pb::MessageParser<OutboundConfig> _parser = new pb::MessageParser<OutboundConfig>(() => new OutboundConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutboundConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Proxyman.ConfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutboundConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutboundConfig(OutboundConfig other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutboundConfig Clone() {
      return new OutboundConfig(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutboundConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutboundConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutboundConfig other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class SenderConfig : pb::IMessage<SenderConfig> {
    private static readonly pb::MessageParser<SenderConfig> _parser = new pb::MessageParser<SenderConfig>(() => new SenderConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SenderConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Proxyman.ConfigReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SenderConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SenderConfig(SenderConfig other) : this() {
      via_ = other.via_ != null ? other.via_.Clone() : null;
      streamSettings_ = other.streamSettings_ != null ? other.streamSettings_.Clone() : null;
      proxySettings_ = other.proxySettings_ != null ? other.proxySettings_.Clone() : null;
      multiplexSettings_ = other.multiplexSettings_ != null ? other.multiplexSettings_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SenderConfig Clone() {
      return new SenderConfig(this);
    }

    /// <summary>Field number for the "via" field.</summary>
    public const int ViaFieldNumber = 1;
    private global::V2Ray.Core.Common.Net.IPOrDomain via_;
    /// <summary>
    /// Send traffic through the given IP. Only IP is allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Net.IPOrDomain Via {
      get { return via_; }
      set {
        via_ = value;
      }
    }

    /// <summary>Field number for the "stream_settings" field.</summary>
    public const int StreamSettingsFieldNumber = 2;
    private global::V2Ray.Core.Transport.Internet.StreamConfig streamSettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Transport.Internet.StreamConfig StreamSettings {
      get { return streamSettings_; }
      set {
        streamSettings_ = value;
      }
    }

    /// <summary>Field number for the "proxy_settings" field.</summary>
    public const int ProxySettingsFieldNumber = 3;
    private global::V2Ray.Core.Transport.Internet.ProxyConfig proxySettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Transport.Internet.ProxyConfig ProxySettings {
      get { return proxySettings_; }
      set {
        proxySettings_ = value;
      }
    }

    /// <summary>Field number for the "multiplex_settings" field.</summary>
    public const int MultiplexSettingsFieldNumber = 4;
    private global::V2Ray.Core.App.Proxyman.MultiplexingConfig multiplexSettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.App.Proxyman.MultiplexingConfig MultiplexSettings {
      get { return multiplexSettings_; }
      set {
        multiplexSettings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SenderConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SenderConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Via, other.Via)) return false;
      if (!object.Equals(StreamSettings, other.StreamSettings)) return false;
      if (!object.Equals(ProxySettings, other.ProxySettings)) return false;
      if (!object.Equals(MultiplexSettings, other.MultiplexSettings)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (via_ != null) hash ^= Via.GetHashCode();
      if (streamSettings_ != null) hash ^= StreamSettings.GetHashCode();
      if (proxySettings_ != null) hash ^= ProxySettings.GetHashCode();
      if (multiplexSettings_ != null) hash ^= MultiplexSettings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (via_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Via);
      }
      if (streamSettings_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StreamSettings);
      }
      if (proxySettings_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ProxySettings);
      }
      if (multiplexSettings_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MultiplexSettings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (via_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Via);
      }
      if (streamSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StreamSettings);
      }
      if (proxySettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProxySettings);
      }
      if (multiplexSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MultiplexSettings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SenderConfig other) {
      if (other == null) {
        return;
      }
      if (other.via_ != null) {
        if (via_ == null) {
          Via = new global::V2Ray.Core.Common.Net.IPOrDomain();
        }
        Via.MergeFrom(other.Via);
      }
      if (other.streamSettings_ != null) {
        if (streamSettings_ == null) {
          StreamSettings = new global::V2Ray.Core.Transport.Internet.StreamConfig();
        }
        StreamSettings.MergeFrom(other.StreamSettings);
      }
      if (other.proxySettings_ != null) {
        if (proxySettings_ == null) {
          ProxySettings = new global::V2Ray.Core.Transport.Internet.ProxyConfig();
        }
        ProxySettings.MergeFrom(other.ProxySettings);
      }
      if (other.multiplexSettings_ != null) {
        if (multiplexSettings_ == null) {
          MultiplexSettings = new global::V2Ray.Core.App.Proxyman.MultiplexingConfig();
        }
        MultiplexSettings.MergeFrom(other.MultiplexSettings);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (via_ == null) {
              Via = new global::V2Ray.Core.Common.Net.IPOrDomain();
            }
            input.ReadMessage(Via);
            break;
          }
          case 18: {
            if (streamSettings_ == null) {
              StreamSettings = new global::V2Ray.Core.Transport.Internet.StreamConfig();
            }
            input.ReadMessage(StreamSettings);
            break;
          }
          case 26: {
            if (proxySettings_ == null) {
              ProxySettings = new global::V2Ray.Core.Transport.Internet.ProxyConfig();
            }
            input.ReadMessage(ProxySettings);
            break;
          }
          case 34: {
            if (multiplexSettings_ == null) {
              MultiplexSettings = new global::V2Ray.Core.App.Proxyman.MultiplexingConfig();
            }
            input.ReadMessage(MultiplexSettings);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MultiplexingConfig : pb::IMessage<MultiplexingConfig> {
    private static readonly pb::MessageParser<MultiplexingConfig> _parser = new pb::MessageParser<MultiplexingConfig>(() => new MultiplexingConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiplexingConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Proxyman.ConfigReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplexingConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplexingConfig(MultiplexingConfig other) : this() {
      enabled_ = other.enabled_;
      concurrency_ = other.concurrency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplexingConfig Clone() {
      return new MultiplexingConfig(this);
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 1;
    private bool enabled_;
    /// <summary>
    /// Whether or not Mux is enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "concurrency" field.</summary>
    public const int ConcurrencyFieldNumber = 2;
    private uint concurrency_;
    /// <summary>
    /// Max number of concurrent connections that one Mux connection can handle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Concurrency {
      get { return concurrency_; }
      set {
        concurrency_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiplexingConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiplexingConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enabled != other.Enabled) return false;
      if (Concurrency != other.Concurrency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Concurrency != 0) hash ^= Concurrency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enabled);
      }
      if (Concurrency != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Concurrency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (Concurrency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Concurrency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiplexingConfig other) {
      if (other == null) {
        return;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Concurrency != 0) {
        Concurrency = other.Concurrency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enabled = input.ReadBool();
            break;
          }
          case 16: {
            Concurrency = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
