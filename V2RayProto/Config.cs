// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace V2Ray.Core {

  /// <summary>Holder for reflection information generated from config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxjb25maWcucHJvdG8SCnYycmF5LmNvcmUaMHYycmF5LmNvbS9jb3JlL2Nv",
            "bW1vbi9zZXJpYWwvdHlwZWRfbWVzc2FnZS5wcm90bxoldjJyYXkuY29tL2Nv",
            "cmUvdHJhbnNwb3J0L2NvbmZpZy5wcm90byKbAgoGQ29uZmlnEjEKB2luYm91",
            "bmQYASADKAsyIC52MnJheS5jb3JlLkluYm91bmRIYW5kbGVyQ29uZmlnEjMK",
            "CG91dGJvdW5kGAIgAygLMiEudjJyYXkuY29yZS5PdXRib3VuZEhhbmRsZXJD",
            "b25maWcSMwoDYXBwGAQgAygLMiYudjJyYXkuY29yZS5jb21tb24uc2VyaWFs",
            "LlR5cGVkTWVzc2FnZRIzCgl0cmFuc3BvcnQYBSABKAsyHC52MnJheS5jb3Jl",
            "LnRyYW5zcG9ydC5Db25maWdCAhgBEjkKCWV4dGVuc2lvbhgGIAMoCzImLnYy",
            "cmF5LmNvcmUuY29tbW9uLnNlcmlhbC5UeXBlZE1lc3NhZ2VKBAgDEAQipgEK",
            "FEluYm91bmRIYW5kbGVyQ29uZmlnEgsKA3RhZxgBIAEoCRJBChFyZWNlaXZl",
            "cl9zZXR0aW5ncxgCIAEoCzImLnYycmF5LmNvcmUuY29tbW9uLnNlcmlhbC5U",
            "eXBlZE1lc3NhZ2USPgoOcHJveHlfc2V0dGluZ3MYAyABKAsyJi52MnJheS5j",
            "b3JlLmNvbW1vbi5zZXJpYWwuVHlwZWRNZXNzYWdlIsYBChVPdXRib3VuZEhh",
            "bmRsZXJDb25maWcSCwoDdGFnGAEgASgJEj8KD3NlbmRlcl9zZXR0aW5ncxgC",
            "IAEoCzImLnYycmF5LmNvcmUuY29tbW9uLnNlcmlhbC5UeXBlZE1lc3NhZ2US",
            "PgoOcHJveHlfc2V0dGluZ3MYAyABKAsyJi52MnJheS5jb3JlLmNvbW1vbi5z",
            "ZXJpYWwuVHlwZWRNZXNzYWdlEg4KBmV4cGlyZRgEIAEoAxIPCgdjb21tZW50",
            "GAUgASgJQiUKDmNvbS52MnJheS5jb3JlUAFaBGNvcmWqAgpWMlJheS5Db3Jl",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::V2Ray.Core.Common.Serial.TypedMessageReflection.Descriptor, global::V2Ray.Core.Transport.ConfigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.Config), global::V2Ray.Core.Config.Parser, new[]{ "Inbound", "Outbound", "App", "Transport", "Extension" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.InboundHandlerConfig), global::V2Ray.Core.InboundHandlerConfig.Parser, new[]{ "Tag", "ReceiverSettings", "ProxySettings" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.OutboundHandlerConfig), global::V2Ray.Core.OutboundHandlerConfig.Parser, new[]{ "Tag", "SenderSettings", "ProxySettings", "Expire", "Comment" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Config is the master config of V2Ray. V2Ray takes this config as input and functions accordingly.
  /// </summary>
  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      inbound_ = other.inbound_.Clone();
      outbound_ = other.outbound_.Clone();
      app_ = other.app_.Clone();
      transport_ = other.transport_ != null ? other.transport_.Clone() : null;
      extension_ = other.extension_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "inbound" field.</summary>
    public const int InboundFieldNumber = 1;
    private static readonly pb::FieldCodec<global::V2Ray.Core.InboundHandlerConfig> _repeated_inbound_codec
        = pb::FieldCodec.ForMessage(10, global::V2Ray.Core.InboundHandlerConfig.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.InboundHandlerConfig> inbound_ = new pbc::RepeatedField<global::V2Ray.Core.InboundHandlerConfig>();
    /// <summary>
    /// Inbound handler configurations. Must have at least one item.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.InboundHandlerConfig> Inbound {
      get { return inbound_; }
    }

    /// <summary>Field number for the "outbound" field.</summary>
    public const int OutboundFieldNumber = 2;
    private static readonly pb::FieldCodec<global::V2Ray.Core.OutboundHandlerConfig> _repeated_outbound_codec
        = pb::FieldCodec.ForMessage(18, global::V2Ray.Core.OutboundHandlerConfig.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.OutboundHandlerConfig> outbound_ = new pbc::RepeatedField<global::V2Ray.Core.OutboundHandlerConfig>();
    /// <summary>
    /// Outbound handler configurations. Must have at least one item. The first item is used as default for routing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.OutboundHandlerConfig> Outbound {
      get { return outbound_; }
    }

    /// <summary>Field number for the "app" field.</summary>
    public const int AppFieldNumber = 4;
    private static readonly pb::FieldCodec<global::V2Ray.Core.Common.Serial.TypedMessage> _repeated_app_codec
        = pb::FieldCodec.ForMessage(34, global::V2Ray.Core.Common.Serial.TypedMessage.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.Common.Serial.TypedMessage> app_ = new pbc::RepeatedField<global::V2Ray.Core.Common.Serial.TypedMessage>();
    /// <summary>
    /// App is for configurations of all features in V2Ray. A feature must implement the Feature interface, and its config type must be registered through common.RegisterConfig.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.Common.Serial.TypedMessage> App {
      get { return app_; }
    }

    /// <summary>Field number for the "transport" field.</summary>
    public const int TransportFieldNumber = 5;
    private global::V2Ray.Core.Transport.Config transport_;
    /// <summary>
    /// Transport settings.
    /// Deprecated. Each inbound and outbound should choose their own transport config.
    /// Date to remove: 2020-01-13 
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Transport.Config Transport {
      get { return transport_; }
      set {
        transport_ = value;
      }
    }

    /// <summary>Field number for the "extension" field.</summary>
    public const int ExtensionFieldNumber = 6;
    private static readonly pb::FieldCodec<global::V2Ray.Core.Common.Serial.TypedMessage> _repeated_extension_codec
        = pb::FieldCodec.ForMessage(50, global::V2Ray.Core.Common.Serial.TypedMessage.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.Common.Serial.TypedMessage> extension_ = new pbc::RepeatedField<global::V2Ray.Core.Common.Serial.TypedMessage>();
    /// <summary>
    /// Configuration for extensions. The config may not work if corresponding extension is not loaded into V2Ray.
    /// V2Ray will ignore such config during initialization.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.Common.Serial.TypedMessage> Extension {
      get { return extension_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!inbound_.Equals(other.inbound_)) return false;
      if(!outbound_.Equals(other.outbound_)) return false;
      if(!app_.Equals(other.app_)) return false;
      if (!object.Equals(Transport, other.Transport)) return false;
      if(!extension_.Equals(other.extension_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= inbound_.GetHashCode();
      hash ^= outbound_.GetHashCode();
      hash ^= app_.GetHashCode();
      if (transport_ != null) hash ^= Transport.GetHashCode();
      hash ^= extension_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      inbound_.WriteTo(output, _repeated_inbound_codec);
      outbound_.WriteTo(output, _repeated_outbound_codec);
      app_.WriteTo(output, _repeated_app_codec);
      if (transport_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Transport);
      }
      extension_.WriteTo(output, _repeated_extension_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += inbound_.CalculateSize(_repeated_inbound_codec);
      size += outbound_.CalculateSize(_repeated_outbound_codec);
      size += app_.CalculateSize(_repeated_app_codec);
      if (transport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transport);
      }
      size += extension_.CalculateSize(_repeated_extension_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      inbound_.Add(other.inbound_);
      outbound_.Add(other.outbound_);
      app_.Add(other.app_);
      if (other.transport_ != null) {
        if (transport_ == null) {
          Transport = new global::V2Ray.Core.Transport.Config();
        }
        Transport.MergeFrom(other.Transport);
      }
      extension_.Add(other.extension_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            inbound_.AddEntriesFrom(input, _repeated_inbound_codec);
            break;
          }
          case 18: {
            outbound_.AddEntriesFrom(input, _repeated_outbound_codec);
            break;
          }
          case 34: {
            app_.AddEntriesFrom(input, _repeated_app_codec);
            break;
          }
          case 42: {
            if (transport_ == null) {
              Transport = new global::V2Ray.Core.Transport.Config();
            }
            input.ReadMessage(Transport);
            break;
          }
          case 50: {
            extension_.AddEntriesFrom(input, _repeated_extension_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// InboundHandlerConfig is the configuration for inbound handler.
  /// </summary>
  public sealed partial class InboundHandlerConfig : pb::IMessage<InboundHandlerConfig> {
    private static readonly pb::MessageParser<InboundHandlerConfig> _parser = new pb::MessageParser<InboundHandlerConfig>(() => new InboundHandlerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InboundHandlerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InboundHandlerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InboundHandlerConfig(InboundHandlerConfig other) : this() {
      tag_ = other.tag_;
      receiverSettings_ = other.receiverSettings_ != null ? other.receiverSettings_.Clone() : null;
      proxySettings_ = other.proxySettings_ != null ? other.proxySettings_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InboundHandlerConfig Clone() {
      return new InboundHandlerConfig(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private string tag_ = "";
    /// <summary>
    /// Tag of the inbound handler. The tag must be unique among all inbound handlers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "receiver_settings" field.</summary>
    public const int ReceiverSettingsFieldNumber = 2;
    private global::V2Ray.Core.Common.Serial.TypedMessage receiverSettings_;
    /// <summary>
    /// Settings for how this inbound proxy is handled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Serial.TypedMessage ReceiverSettings {
      get { return receiverSettings_; }
      set {
        receiverSettings_ = value;
      }
    }

    /// <summary>Field number for the "proxy_settings" field.</summary>
    public const int ProxySettingsFieldNumber = 3;
    private global::V2Ray.Core.Common.Serial.TypedMessage proxySettings_;
    /// <summary>
    /// Settings for inbound proxy. Must be one of the inbound proxies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Serial.TypedMessage ProxySettings {
      get { return proxySettings_; }
      set {
        proxySettings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InboundHandlerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InboundHandlerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (!object.Equals(ReceiverSettings, other.ReceiverSettings)) return false;
      if (!object.Equals(ProxySettings, other.ProxySettings)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (receiverSettings_ != null) hash ^= ReceiverSettings.GetHashCode();
      if (proxySettings_ != null) hash ^= ProxySettings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tag);
      }
      if (receiverSettings_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ReceiverSettings);
      }
      if (proxySettings_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ProxySettings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (receiverSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReceiverSettings);
      }
      if (proxySettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProxySettings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InboundHandlerConfig other) {
      if (other == null) {
        return;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      if (other.receiverSettings_ != null) {
        if (receiverSettings_ == null) {
          ReceiverSettings = new global::V2Ray.Core.Common.Serial.TypedMessage();
        }
        ReceiverSettings.MergeFrom(other.ReceiverSettings);
      }
      if (other.proxySettings_ != null) {
        if (proxySettings_ == null) {
          ProxySettings = new global::V2Ray.Core.Common.Serial.TypedMessage();
        }
        ProxySettings.MergeFrom(other.ProxySettings);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Tag = input.ReadString();
            break;
          }
          case 18: {
            if (receiverSettings_ == null) {
              ReceiverSettings = new global::V2Ray.Core.Common.Serial.TypedMessage();
            }
            input.ReadMessage(ReceiverSettings);
            break;
          }
          case 26: {
            if (proxySettings_ == null) {
              ProxySettings = new global::V2Ray.Core.Common.Serial.TypedMessage();
            }
            input.ReadMessage(ProxySettings);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// OutboundHandlerConfig is the configuration for outbound handler.
  /// </summary>
  public sealed partial class OutboundHandlerConfig : pb::IMessage<OutboundHandlerConfig> {
    private static readonly pb::MessageParser<OutboundHandlerConfig> _parser = new pb::MessageParser<OutboundHandlerConfig>(() => new OutboundHandlerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutboundHandlerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutboundHandlerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutboundHandlerConfig(OutboundHandlerConfig other) : this() {
      tag_ = other.tag_;
      senderSettings_ = other.senderSettings_ != null ? other.senderSettings_.Clone() : null;
      proxySettings_ = other.proxySettings_ != null ? other.proxySettings_.Clone() : null;
      expire_ = other.expire_;
      comment_ = other.comment_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutboundHandlerConfig Clone() {
      return new OutboundHandlerConfig(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private string tag_ = "";
    /// <summary>
    /// Tag of this outbound handler.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sender_settings" field.</summary>
    public const int SenderSettingsFieldNumber = 2;
    private global::V2Ray.Core.Common.Serial.TypedMessage senderSettings_;
    /// <summary>
    /// Settings for how to dial connection for this outbound handler.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Serial.TypedMessage SenderSettings {
      get { return senderSettings_; }
      set {
        senderSettings_ = value;
      }
    }

    /// <summary>Field number for the "proxy_settings" field.</summary>
    public const int ProxySettingsFieldNumber = 3;
    private global::V2Ray.Core.Common.Serial.TypedMessage proxySettings_;
    /// <summary>
    /// Settings for this outbound proxy. Must be one of the outbound proxies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Serial.TypedMessage ProxySettings {
      get { return proxySettings_; }
      set {
        proxySettings_ = value;
      }
    }

    /// <summary>Field number for the "expire" field.</summary>
    public const int ExpireFieldNumber = 4;
    private long expire_;
    /// <summary>
    /// If not zero, this outbound will be expired in seconds. Not used for now.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expire {
      get { return expire_; }
      set {
        expire_ = value;
      }
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 5;
    private string comment_ = "";
    /// <summary>
    /// Comment of this outbound handler. Not used for now.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comment {
      get { return comment_; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutboundHandlerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutboundHandlerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (!object.Equals(SenderSettings, other.SenderSettings)) return false;
      if (!object.Equals(ProxySettings, other.ProxySettings)) return false;
      if (Expire != other.Expire) return false;
      if (Comment != other.Comment) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (senderSettings_ != null) hash ^= SenderSettings.GetHashCode();
      if (proxySettings_ != null) hash ^= ProxySettings.GetHashCode();
      if (Expire != 0L) hash ^= Expire.GetHashCode();
      if (Comment.Length != 0) hash ^= Comment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tag);
      }
      if (senderSettings_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SenderSettings);
      }
      if (proxySettings_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ProxySettings);
      }
      if (Expire != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Expire);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Comment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (senderSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SenderSettings);
      }
      if (proxySettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProxySettings);
      }
      if (Expire != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expire);
      }
      if (Comment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutboundHandlerConfig other) {
      if (other == null) {
        return;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      if (other.senderSettings_ != null) {
        if (senderSettings_ == null) {
          SenderSettings = new global::V2Ray.Core.Common.Serial.TypedMessage();
        }
        SenderSettings.MergeFrom(other.SenderSettings);
      }
      if (other.proxySettings_ != null) {
        if (proxySettings_ == null) {
          ProxySettings = new global::V2Ray.Core.Common.Serial.TypedMessage();
        }
        ProxySettings.MergeFrom(other.ProxySettings);
      }
      if (other.Expire != 0L) {
        Expire = other.Expire;
      }
      if (other.Comment.Length != 0) {
        Comment = other.Comment;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Tag = input.ReadString();
            break;
          }
          case 18: {
            if (senderSettings_ == null) {
              SenderSettings = new global::V2Ray.Core.Common.Serial.TypedMessage();
            }
            input.ReadMessage(SenderSettings);
            break;
          }
          case 26: {
            if (proxySettings_ == null) {
              ProxySettings = new global::V2Ray.Core.Common.Serial.TypedMessage();
            }
            input.ReadMessage(ProxySettings);
            break;
          }
          case 32: {
            Expire = input.ReadInt64();
            break;
          }
          case 42: {
            Comment = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
