// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: transport/internet/config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace V2Ray.Core.Transport.Internet {

  /// <summary>Holder for reflection information generated from transport/internet/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for transport/internet/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch90cmFuc3BvcnQvaW50ZXJuZXQvY29uZmlnLnByb3RvEh12MnJheS5jb3Jl",
            "LnRyYW5zcG9ydC5pbnRlcm5ldBowdjJyYXkuY29tL2NvcmUvY29tbW9uL3Nl",
            "cmlhbC90eXBlZF9tZXNzYWdlLnByb3RvIqYBCg9UcmFuc3BvcnRDb25maWcS",
            "QgoIcHJvdG9jb2wYASABKA4yMC52MnJheS5jb3JlLnRyYW5zcG9ydC5pbnRl",
            "cm5ldC5UcmFuc3BvcnRQcm90b2NvbBIVCg1wcm90b2NvbF9uYW1lGAMgASgJ",
            "EjgKCHNldHRpbmdzGAIgASgLMiYudjJyYXkuY29yZS5jb21tb24uc2VyaWFs",
            "LlR5cGVkTWVzc2FnZSLZAgoMU3RyZWFtQ29uZmlnEkYKCHByb3RvY29sGAEg",
            "ASgOMjAudjJyYXkuY29yZS50cmFuc3BvcnQuaW50ZXJuZXQuVHJhbnNwb3J0",
            "UHJvdG9jb2xCAhgBEhUKDXByb3RvY29sX25hbWUYBSABKAkSSgoSdHJhbnNw",
            "b3J0X3NldHRpbmdzGAIgAygLMi4udjJyYXkuY29yZS50cmFuc3BvcnQuaW50",
            "ZXJuZXQuVHJhbnNwb3J0Q29uZmlnEhUKDXNlY3VyaXR5X3R5cGUYAyABKAkS",
            "QQoRc2VjdXJpdHlfc2V0dGluZ3MYBCADKAsyJi52MnJheS5jb3JlLmNvbW1v",
            "bi5zZXJpYWwuVHlwZWRNZXNzYWdlEkQKD3NvY2tldF9zZXR0aW5ncxgGIAEo",
            "CzIrLnYycmF5LmNvcmUudHJhbnNwb3J0LmludGVybmV0LlNvY2tldENvbmZp",
            "ZyIaCgtQcm94eUNvbmZpZxILCgN0YWcYASABKAki5wIKDFNvY2tldENvbmZp",
            "ZxIMCgRtYXJrGAEgASgFEkkKA3RmbxgCIAEoDjI8LnYycmF5LmNvcmUudHJh",
            "bnNwb3J0LmludGVybmV0LlNvY2tldENvbmZpZy5UQ1BGYXN0T3BlblN0YXRl",
            "EkYKBnRwcm94eRgDIAEoDjI2LnYycmF5LmNvcmUudHJhbnNwb3J0LmludGVy",
            "bmV0LlNvY2tldENvbmZpZy5UUHJveHlNb2RlEiUKHXJlY2VpdmVfb3JpZ2lu",
            "YWxfZGVzdF9hZGRyZXNzGAQgASgIEhQKDGJpbmRfYWRkcmVzcxgFIAEoDBIR",
            "CgliaW5kX3BvcnQYBiABKA0iNQoQVENQRmFzdE9wZW5TdGF0ZRIICgRBc0lz",
            "EAASCgoGRW5hYmxlEAESCwoHRGlzYWJsZRACIi8KClRQcm94eU1vZGUSBwoD",
            "T2ZmEAASCgoGVFByb3h5EAESDAoIUmVkaXJlY3QQAipaChFUcmFuc3BvcnRQ",
            "cm90b2NvbBIHCgNUQ1AQABIHCgNVRFAQARIICgRNS0NQEAISDQoJV2ViU29j",
            "a2V0EAMSCAoESFRUUBAEEhAKDERvbWFpblNvY2tldBAFQk8KIWNvbS52MnJh",
            "eS5jb3JlLnRyYW5zcG9ydC5pbnRlcm5ldFABWghpbnRlcm5ldKoCHVYyUmF5",
            "LkNvcmUuVHJhbnNwb3J0LkludGVybmV0YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::V2Ray.Core.Common.Serial.TypedMessageReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::V2Ray.Core.Transport.Internet.TransportProtocol), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.Transport.Internet.TransportConfig), global::V2Ray.Core.Transport.Internet.TransportConfig.Parser, new[]{ "Protocol", "ProtocolName", "Settings" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.Transport.Internet.StreamConfig), global::V2Ray.Core.Transport.Internet.StreamConfig.Parser, new[]{ "Protocol", "ProtocolName", "TransportSettings", "SecurityType", "SecuritySettings", "SocketSettings" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.Transport.Internet.ProxyConfig), global::V2Ray.Core.Transport.Internet.ProxyConfig.Parser, new[]{ "Tag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.Transport.Internet.SocketConfig), global::V2Ray.Core.Transport.Internet.SocketConfig.Parser, new[]{ "Mark", "Tfo", "Tproxy", "ReceiveOriginalDestAddress", "BindAddress", "BindPort" }, null, new[]{ typeof(global::V2Ray.Core.Transport.Internet.SocketConfig.Types.TCPFastOpenState), typeof(global::V2Ray.Core.Transport.Internet.SocketConfig.Types.TProxyMode) }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TransportProtocol {
    [pbr::OriginalName("TCP")] Tcp = 0,
    [pbr::OriginalName("UDP")] Udp = 1,
    [pbr::OriginalName("MKCP")] Mkcp = 2,
    [pbr::OriginalName("WebSocket")] WebSocket = 3,
    [pbr::OriginalName("HTTP")] Http = 4,
    [pbr::OriginalName("DomainSocket")] DomainSocket = 5,
  }

  #endregion

  #region Messages
  public sealed partial class TransportConfig : pb::IMessage<TransportConfig> {
    private static readonly pb::MessageParser<TransportConfig> _parser = new pb::MessageParser<TransportConfig>(() => new TransportConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransportConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.Transport.Internet.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportConfig(TransportConfig other) : this() {
      protocol_ = other.protocol_;
      protocolName_ = other.protocolName_;
      settings_ = other.settings_ != null ? other.settings_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportConfig Clone() {
      return new TransportConfig(this);
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 1;
    private global::V2Ray.Core.Transport.Internet.TransportProtocol protocol_ = global::V2Ray.Core.Transport.Internet.TransportProtocol.Tcp;
    /// <summary>
    /// Type of network that this settings supports.
    /// Deprecated. Use the string form below.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Transport.Internet.TransportProtocol Protocol {
      get { return protocol_; }
      set {
        protocol_ = value;
      }
    }

    /// <summary>Field number for the "protocol_name" field.</summary>
    public const int ProtocolNameFieldNumber = 3;
    private string protocolName_ = "";
    /// <summary>
    /// Type of network that this settings supports.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProtocolName {
      get { return protocolName_; }
      set {
        protocolName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settings" field.</summary>
    public const int SettingsFieldNumber = 2;
    private global::V2Ray.Core.Common.Serial.TypedMessage settings_;
    /// <summary>
    /// Specific settings. Must be of the transports.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Serial.TypedMessage Settings {
      get { return settings_; }
      set {
        settings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransportConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransportConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Protocol != other.Protocol) return false;
      if (ProtocolName != other.ProtocolName) return false;
      if (!object.Equals(Settings, other.Settings)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Protocol != global::V2Ray.Core.Transport.Internet.TransportProtocol.Tcp) hash ^= Protocol.GetHashCode();
      if (ProtocolName.Length != 0) hash ^= ProtocolName.GetHashCode();
      if (settings_ != null) hash ^= Settings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Protocol != global::V2Ray.Core.Transport.Internet.TransportProtocol.Tcp) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Protocol);
      }
      if (settings_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Settings);
      }
      if (ProtocolName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProtocolName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Protocol != global::V2Ray.Core.Transport.Internet.TransportProtocol.Tcp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Protocol);
      }
      if (ProtocolName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProtocolName);
      }
      if (settings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransportConfig other) {
      if (other == null) {
        return;
      }
      if (other.Protocol != global::V2Ray.Core.Transport.Internet.TransportProtocol.Tcp) {
        Protocol = other.Protocol;
      }
      if (other.ProtocolName.Length != 0) {
        ProtocolName = other.ProtocolName;
      }
      if (other.settings_ != null) {
        if (settings_ == null) {
          Settings = new global::V2Ray.Core.Common.Serial.TypedMessage();
        }
        Settings.MergeFrom(other.Settings);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Protocol = (global::V2Ray.Core.Transport.Internet.TransportProtocol) input.ReadEnum();
            break;
          }
          case 18: {
            if (settings_ == null) {
              Settings = new global::V2Ray.Core.Common.Serial.TypedMessage();
            }
            input.ReadMessage(Settings);
            break;
          }
          case 26: {
            ProtocolName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamConfig : pb::IMessage<StreamConfig> {
    private static readonly pb::MessageParser<StreamConfig> _parser = new pb::MessageParser<StreamConfig>(() => new StreamConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.Transport.Internet.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamConfig(StreamConfig other) : this() {
      protocol_ = other.protocol_;
      protocolName_ = other.protocolName_;
      transportSettings_ = other.transportSettings_.Clone();
      securityType_ = other.securityType_;
      securitySettings_ = other.securitySettings_.Clone();
      socketSettings_ = other.socketSettings_ != null ? other.socketSettings_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamConfig Clone() {
      return new StreamConfig(this);
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 1;
    private global::V2Ray.Core.Transport.Internet.TransportProtocol protocol_ = global::V2Ray.Core.Transport.Internet.TransportProtocol.Tcp;
    /// <summary>
    /// Effective network. Deprecated. Use the string form below.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Transport.Internet.TransportProtocol Protocol {
      get { return protocol_; }
      set {
        protocol_ = value;
      }
    }

    /// <summary>Field number for the "protocol_name" field.</summary>
    public const int ProtocolNameFieldNumber = 5;
    private string protocolName_ = "";
    /// <summary>
    /// Effective network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProtocolName {
      get { return protocolName_; }
      set {
        protocolName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transport_settings" field.</summary>
    public const int TransportSettingsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::V2Ray.Core.Transport.Internet.TransportConfig> _repeated_transportSettings_codec
        = pb::FieldCodec.ForMessage(18, global::V2Ray.Core.Transport.Internet.TransportConfig.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.Transport.Internet.TransportConfig> transportSettings_ = new pbc::RepeatedField<global::V2Ray.Core.Transport.Internet.TransportConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.Transport.Internet.TransportConfig> TransportSettings {
      get { return transportSettings_; }
    }

    /// <summary>Field number for the "security_type" field.</summary>
    public const int SecurityTypeFieldNumber = 3;
    private string securityType_ = "";
    /// <summary>
    /// Type of security. Must be a message name of the settings proto.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecurityType {
      get { return securityType_; }
      set {
        securityType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "security_settings" field.</summary>
    public const int SecuritySettingsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::V2Ray.Core.Common.Serial.TypedMessage> _repeated_securitySettings_codec
        = pb::FieldCodec.ForMessage(34, global::V2Ray.Core.Common.Serial.TypedMessage.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.Common.Serial.TypedMessage> securitySettings_ = new pbc::RepeatedField<global::V2Ray.Core.Common.Serial.TypedMessage>();
    /// <summary>
    /// Settings for transport security. For now the only choice is TLS.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.Common.Serial.TypedMessage> SecuritySettings {
      get { return securitySettings_; }
    }

    /// <summary>Field number for the "socket_settings" field.</summary>
    public const int SocketSettingsFieldNumber = 6;
    private global::V2Ray.Core.Transport.Internet.SocketConfig socketSettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Transport.Internet.SocketConfig SocketSettings {
      get { return socketSettings_; }
      set {
        socketSettings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Protocol != other.Protocol) return false;
      if (ProtocolName != other.ProtocolName) return false;
      if(!transportSettings_.Equals(other.transportSettings_)) return false;
      if (SecurityType != other.SecurityType) return false;
      if(!securitySettings_.Equals(other.securitySettings_)) return false;
      if (!object.Equals(SocketSettings, other.SocketSettings)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Protocol != global::V2Ray.Core.Transport.Internet.TransportProtocol.Tcp) hash ^= Protocol.GetHashCode();
      if (ProtocolName.Length != 0) hash ^= ProtocolName.GetHashCode();
      hash ^= transportSettings_.GetHashCode();
      if (SecurityType.Length != 0) hash ^= SecurityType.GetHashCode();
      hash ^= securitySettings_.GetHashCode();
      if (socketSettings_ != null) hash ^= SocketSettings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Protocol != global::V2Ray.Core.Transport.Internet.TransportProtocol.Tcp) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Protocol);
      }
      transportSettings_.WriteTo(output, _repeated_transportSettings_codec);
      if (SecurityType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SecurityType);
      }
      securitySettings_.WriteTo(output, _repeated_securitySettings_codec);
      if (ProtocolName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ProtocolName);
      }
      if (socketSettings_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SocketSettings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Protocol != global::V2Ray.Core.Transport.Internet.TransportProtocol.Tcp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Protocol);
      }
      if (ProtocolName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProtocolName);
      }
      size += transportSettings_.CalculateSize(_repeated_transportSettings_codec);
      if (SecurityType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecurityType);
      }
      size += securitySettings_.CalculateSize(_repeated_securitySettings_codec);
      if (socketSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SocketSettings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamConfig other) {
      if (other == null) {
        return;
      }
      if (other.Protocol != global::V2Ray.Core.Transport.Internet.TransportProtocol.Tcp) {
        Protocol = other.Protocol;
      }
      if (other.ProtocolName.Length != 0) {
        ProtocolName = other.ProtocolName;
      }
      transportSettings_.Add(other.transportSettings_);
      if (other.SecurityType.Length != 0) {
        SecurityType = other.SecurityType;
      }
      securitySettings_.Add(other.securitySettings_);
      if (other.socketSettings_ != null) {
        if (socketSettings_ == null) {
          SocketSettings = new global::V2Ray.Core.Transport.Internet.SocketConfig();
        }
        SocketSettings.MergeFrom(other.SocketSettings);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Protocol = (global::V2Ray.Core.Transport.Internet.TransportProtocol) input.ReadEnum();
            break;
          }
          case 18: {
            transportSettings_.AddEntriesFrom(input, _repeated_transportSettings_codec);
            break;
          }
          case 26: {
            SecurityType = input.ReadString();
            break;
          }
          case 34: {
            securitySettings_.AddEntriesFrom(input, _repeated_securitySettings_codec);
            break;
          }
          case 42: {
            ProtocolName = input.ReadString();
            break;
          }
          case 50: {
            if (socketSettings_ == null) {
              SocketSettings = new global::V2Ray.Core.Transport.Internet.SocketConfig();
            }
            input.ReadMessage(SocketSettings);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProxyConfig : pb::IMessage<ProxyConfig> {
    private static readonly pb::MessageParser<ProxyConfig> _parser = new pb::MessageParser<ProxyConfig>(() => new ProxyConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProxyConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.Transport.Internet.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProxyConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProxyConfig(ProxyConfig other) : this() {
      tag_ = other.tag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProxyConfig Clone() {
      return new ProxyConfig(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private string tag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProxyConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProxyConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProxyConfig other) {
      if (other == null) {
        return;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Tag = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SocketConfig is options to be applied on network sockets.
  /// </summary>
  public sealed partial class SocketConfig : pb::IMessage<SocketConfig> {
    private static readonly pb::MessageParser<SocketConfig> _parser = new pb::MessageParser<SocketConfig>(() => new SocketConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SocketConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.Transport.Internet.ConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketConfig(SocketConfig other) : this() {
      mark_ = other.mark_;
      tfo_ = other.tfo_;
      tproxy_ = other.tproxy_;
      receiveOriginalDestAddress_ = other.receiveOriginalDestAddress_;
      bindAddress_ = other.bindAddress_;
      bindPort_ = other.bindPort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketConfig Clone() {
      return new SocketConfig(this);
    }

    /// <summary>Field number for the "mark" field.</summary>
    public const int MarkFieldNumber = 1;
    private int mark_;
    /// <summary>
    /// Mark of the connection. If non-zero, the value will be set to SO_MARK.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mark {
      get { return mark_; }
      set {
        mark_ = value;
      }
    }

    /// <summary>Field number for the "tfo" field.</summary>
    public const int TfoFieldNumber = 2;
    private global::V2Ray.Core.Transport.Internet.SocketConfig.Types.TCPFastOpenState tfo_ = global::V2Ray.Core.Transport.Internet.SocketConfig.Types.TCPFastOpenState.AsIs;
    /// <summary>
    /// TFO is the state of TFO settings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Transport.Internet.SocketConfig.Types.TCPFastOpenState Tfo {
      get { return tfo_; }
      set {
        tfo_ = value;
      }
    }

    /// <summary>Field number for the "tproxy" field.</summary>
    public const int TproxyFieldNumber = 3;
    private global::V2Ray.Core.Transport.Internet.SocketConfig.Types.TProxyMode tproxy_ = global::V2Ray.Core.Transport.Internet.SocketConfig.Types.TProxyMode.Off;
    /// <summary>
    /// TProxy is for enabling TProxy socket option.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Transport.Internet.SocketConfig.Types.TProxyMode Tproxy {
      get { return tproxy_; }
      set {
        tproxy_ = value;
      }
    }

    /// <summary>Field number for the "receive_original_dest_address" field.</summary>
    public const int ReceiveOriginalDestAddressFieldNumber = 4;
    private bool receiveOriginalDestAddress_;
    /// <summary>
    /// ReceiveOriginalDestAddress is for enabling IP_RECVORIGDSTADDR socket option.
    /// This option is for UDP only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReceiveOriginalDestAddress {
      get { return receiveOriginalDestAddress_; }
      set {
        receiveOriginalDestAddress_ = value;
      }
    }

    /// <summary>Field number for the "bind_address" field.</summary>
    public const int BindAddressFieldNumber = 5;
    private pb::ByteString bindAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BindAddress {
      get { return bindAddress_; }
      set {
        bindAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bind_port" field.</summary>
    public const int BindPortFieldNumber = 6;
    private uint bindPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BindPort {
      get { return bindPort_; }
      set {
        bindPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SocketConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SocketConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mark != other.Mark) return false;
      if (Tfo != other.Tfo) return false;
      if (Tproxy != other.Tproxy) return false;
      if (ReceiveOriginalDestAddress != other.ReceiveOriginalDestAddress) return false;
      if (BindAddress != other.BindAddress) return false;
      if (BindPort != other.BindPort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mark != 0) hash ^= Mark.GetHashCode();
      if (Tfo != global::V2Ray.Core.Transport.Internet.SocketConfig.Types.TCPFastOpenState.AsIs) hash ^= Tfo.GetHashCode();
      if (Tproxy != global::V2Ray.Core.Transport.Internet.SocketConfig.Types.TProxyMode.Off) hash ^= Tproxy.GetHashCode();
      if (ReceiveOriginalDestAddress != false) hash ^= ReceiveOriginalDestAddress.GetHashCode();
      if (BindAddress.Length != 0) hash ^= BindAddress.GetHashCode();
      if (BindPort != 0) hash ^= BindPort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mark != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Mark);
      }
      if (Tfo != global::V2Ray.Core.Transport.Internet.SocketConfig.Types.TCPFastOpenState.AsIs) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Tfo);
      }
      if (Tproxy != global::V2Ray.Core.Transport.Internet.SocketConfig.Types.TProxyMode.Off) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Tproxy);
      }
      if (ReceiveOriginalDestAddress != false) {
        output.WriteRawTag(32);
        output.WriteBool(ReceiveOriginalDestAddress);
      }
      if (BindAddress.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(BindAddress);
      }
      if (BindPort != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(BindPort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mark != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mark);
      }
      if (Tfo != global::V2Ray.Core.Transport.Internet.SocketConfig.Types.TCPFastOpenState.AsIs) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Tfo);
      }
      if (Tproxy != global::V2Ray.Core.Transport.Internet.SocketConfig.Types.TProxyMode.Off) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Tproxy);
      }
      if (ReceiveOriginalDestAddress != false) {
        size += 1 + 1;
      }
      if (BindAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BindAddress);
      }
      if (BindPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BindPort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SocketConfig other) {
      if (other == null) {
        return;
      }
      if (other.Mark != 0) {
        Mark = other.Mark;
      }
      if (other.Tfo != global::V2Ray.Core.Transport.Internet.SocketConfig.Types.TCPFastOpenState.AsIs) {
        Tfo = other.Tfo;
      }
      if (other.Tproxy != global::V2Ray.Core.Transport.Internet.SocketConfig.Types.TProxyMode.Off) {
        Tproxy = other.Tproxy;
      }
      if (other.ReceiveOriginalDestAddress != false) {
        ReceiveOriginalDestAddress = other.ReceiveOriginalDestAddress;
      }
      if (other.BindAddress.Length != 0) {
        BindAddress = other.BindAddress;
      }
      if (other.BindPort != 0) {
        BindPort = other.BindPort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mark = input.ReadInt32();
            break;
          }
          case 16: {
            Tfo = (global::V2Ray.Core.Transport.Internet.SocketConfig.Types.TCPFastOpenState) input.ReadEnum();
            break;
          }
          case 24: {
            Tproxy = (global::V2Ray.Core.Transport.Internet.SocketConfig.Types.TProxyMode) input.ReadEnum();
            break;
          }
          case 32: {
            ReceiveOriginalDestAddress = input.ReadBool();
            break;
          }
          case 42: {
            BindAddress = input.ReadBytes();
            break;
          }
          case 48: {
            BindPort = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SocketConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TCPFastOpenState {
        /// <summary>
        /// AsIs is to leave the current TFO state as is, unmodified.
        /// </summary>
        [pbr::OriginalName("AsIs")] AsIs = 0,
        /// <summary>
        /// Enable is for enabling TFO explictly.
        /// </summary>
        [pbr::OriginalName("Enable")] Enable = 1,
        /// <summary>
        /// Disable is for disabling TFO explictly.
        /// </summary>
        [pbr::OriginalName("Disable")] Disable = 2,
      }

      public enum TProxyMode {
        /// <summary>
        /// TProxy is off.
        /// </summary>
        [pbr::OriginalName("Off")] Off = 0,
        /// <summary>
        /// TProxy mode.
        /// </summary>
        [pbr::OriginalName("TProxy")] Tproxy = 1,
        /// <summary>
        /// Redirect mode.
        /// </summary>
        [pbr::OriginalName("Redirect")] Redirect = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
