// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: transport/internet/tls/config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace V2Ray.Core.Transport.Internet.Tls {

  /// <summary>Holder for reflection information generated from transport/internet/tls/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for transport/internet/tls/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiN0cmFuc3BvcnQvaW50ZXJuZXQvdGxzL2NvbmZpZy5wcm90bxIhdjJyYXku",
            "Y29yZS50cmFuc3BvcnQuaW50ZXJuZXQudGxzIroBCgtDZXJ0aWZpY2F0ZRIT",
            "CgtDZXJ0aWZpY2F0ZRgBIAEoDBILCgNLZXkYAiABKAwSQwoFdXNhZ2UYAyAB",
            "KA4yNC52MnJheS5jb3JlLnRyYW5zcG9ydC5pbnRlcm5ldC50bHMuQ2VydGlm",
            "aWNhdGUuVXNhZ2UiRAoFVXNhZ2USEAoMRU5DSVBIRVJNRU5UEAASFAoQQVVU",
            "SE9SSVRZX1ZFUklGWRABEhMKD0FVVEhPUklUWV9JU1NVRRACIvIBCgZDb25m",
            "aWcSFgoOYWxsb3dfaW5zZWN1cmUYASABKAgSHgoWYWxsb3dfaW5zZWN1cmVf",
            "Y2lwaGVycxgFIAEoCBJDCgtjZXJ0aWZpY2F0ZRgCIAMoCzIuLnYycmF5LmNv",
            "cmUudHJhbnNwb3J0LmludGVybmV0LnRscy5DZXJ0aWZpY2F0ZRITCgtzZXJ2",
            "ZXJfbmFtZRgDIAEoCRIVCg1uZXh0X3Byb3RvY29sGAQgAygJEiIKGmRpc2Fi",
            "bGVfc2Vzc2lvbl9yZXN1bXB0aW9uGAYgASgIEhsKE2Rpc2FibGVfc3lzdGVt",
            "X3Jvb3QYByABKAhCUgolY29tLnYycmF5LmNvcmUudHJhbnNwb3J0LmludGVy",
            "bmV0LnRsc1ABWgN0bHOqAiFWMlJheS5Db3JlLlRyYW5zcG9ydC5JbnRlcm5l",
            "dC5UbHNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.Transport.Internet.Tls.Certificate), global::V2Ray.Core.Transport.Internet.Tls.Certificate.Parser, new[]{ "Certificate_", "Key", "Usage" }, null, new[]{ typeof(global::V2Ray.Core.Transport.Internet.Tls.Certificate.Types.Usage) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.Transport.Internet.Tls.Config), global::V2Ray.Core.Transport.Internet.Tls.Config.Parser, new[]{ "AllowInsecure", "AllowInsecureCiphers", "Certificate", "ServerName", "NextProtocol", "DisableSessionResumption", "DisableSystemRoot" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Certificate : pb::IMessage<Certificate> {
    private static readonly pb::MessageParser<Certificate> _parser = new pb::MessageParser<Certificate>(() => new Certificate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Certificate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.Transport.Internet.Tls.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Certificate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Certificate(Certificate other) : this() {
      certificate_ = other.certificate_;
      key_ = other.key_;
      usage_ = other.usage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Certificate Clone() {
      return new Certificate(this);
    }

    /// <summary>Field number for the "Certificate" field.</summary>
    public const int Certificate_FieldNumber = 1;
    private pb::ByteString certificate_ = pb::ByteString.Empty;
    /// <summary>
    /// TLS certificate in x509 format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Certificate_ {
      get { return certificate_; }
      set {
        certificate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 2;
    private pb::ByteString key_ = pb::ByteString.Empty;
    /// <summary>
    /// TLS key in x509 format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "usage" field.</summary>
    public const int UsageFieldNumber = 3;
    private global::V2Ray.Core.Transport.Internet.Tls.Certificate.Types.Usage usage_ = global::V2Ray.Core.Transport.Internet.Tls.Certificate.Types.Usage.Encipherment;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Transport.Internet.Tls.Certificate.Types.Usage Usage {
      get { return usage_; }
      set {
        usage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Certificate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Certificate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Certificate_ != other.Certificate_) return false;
      if (Key != other.Key) return false;
      if (Usage != other.Usage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Certificate_.Length != 0) hash ^= Certificate_.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Usage != global::V2Ray.Core.Transport.Internet.Tls.Certificate.Types.Usage.Encipherment) hash ^= Usage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Certificate_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Certificate_);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Key);
      }
      if (Usage != global::V2Ray.Core.Transport.Internet.Tls.Certificate.Types.Usage.Encipherment) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Usage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Certificate_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Certificate_);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (Usage != global::V2Ray.Core.Transport.Internet.Tls.Certificate.Types.Usage.Encipherment) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Usage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Certificate other) {
      if (other == null) {
        return;
      }
      if (other.Certificate_.Length != 0) {
        Certificate_ = other.Certificate_;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Usage != global::V2Ray.Core.Transport.Internet.Tls.Certificate.Types.Usage.Encipherment) {
        Usage = other.Usage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Certificate_ = input.ReadBytes();
            break;
          }
          case 18: {
            Key = input.ReadBytes();
            break;
          }
          case 24: {
            Usage = (global::V2Ray.Core.Transport.Internet.Tls.Certificate.Types.Usage) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Certificate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Usage {
        [pbr::OriginalName("ENCIPHERMENT")] Encipherment = 0,
        [pbr::OriginalName("AUTHORITY_VERIFY")] AuthorityVerify = 1,
        [pbr::OriginalName("AUTHORITY_ISSUE")] AuthorityIssue = 2,
      }

    }
    #endregion

  }

  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.Transport.Internet.Tls.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      allowInsecure_ = other.allowInsecure_;
      allowInsecureCiphers_ = other.allowInsecureCiphers_;
      certificate_ = other.certificate_.Clone();
      serverName_ = other.serverName_;
      nextProtocol_ = other.nextProtocol_.Clone();
      disableSessionResumption_ = other.disableSessionResumption_;
      disableSystemRoot_ = other.disableSystemRoot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "allow_insecure" field.</summary>
    public const int AllowInsecureFieldNumber = 1;
    private bool allowInsecure_;
    /// <summary>
    /// Whether or not to allow self-signed certificates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowInsecure {
      get { return allowInsecure_; }
      set {
        allowInsecure_ = value;
      }
    }

    /// <summary>Field number for the "allow_insecure_ciphers" field.</summary>
    public const int AllowInsecureCiphersFieldNumber = 5;
    private bool allowInsecureCiphers_;
    /// <summary>
    /// Whether or not to allow insecure cipher suites.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowInsecureCiphers {
      get { return allowInsecureCiphers_; }
      set {
        allowInsecureCiphers_ = value;
      }
    }

    /// <summary>Field number for the "certificate" field.</summary>
    public const int CertificateFieldNumber = 2;
    private static readonly pb::FieldCodec<global::V2Ray.Core.Transport.Internet.Tls.Certificate> _repeated_certificate_codec
        = pb::FieldCodec.ForMessage(18, global::V2Ray.Core.Transport.Internet.Tls.Certificate.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.Transport.Internet.Tls.Certificate> certificate_ = new pbc::RepeatedField<global::V2Ray.Core.Transport.Internet.Tls.Certificate>();
    /// <summary>
    /// List of certificates to be served on server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.Transport.Internet.Tls.Certificate> Certificate {
      get { return certificate_; }
    }

    /// <summary>Field number for the "server_name" field.</summary>
    public const int ServerNameFieldNumber = 3;
    private string serverName_ = "";
    /// <summary>
    /// Override server name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerName {
      get { return serverName_; }
      set {
        serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "next_protocol" field.</summary>
    public const int NextProtocolFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_nextProtocol_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> nextProtocol_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Lists of string as ALPN values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NextProtocol {
      get { return nextProtocol_; }
    }

    /// <summary>Field number for the "disable_session_resumption" field.</summary>
    public const int DisableSessionResumptionFieldNumber = 6;
    private bool disableSessionResumption_;
    /// <summary>
    /// Whether or not to disable session (ticket) resumption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableSessionResumption {
      get { return disableSessionResumption_; }
      set {
        disableSessionResumption_ = value;
      }
    }

    /// <summary>Field number for the "disable_system_root" field.</summary>
    public const int DisableSystemRootFieldNumber = 7;
    private bool disableSystemRoot_;
    /// <summary>
    /// If true, root certificates on the system will not be loaded for verification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableSystemRoot {
      get { return disableSystemRoot_; }
      set {
        disableSystemRoot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllowInsecure != other.AllowInsecure) return false;
      if (AllowInsecureCiphers != other.AllowInsecureCiphers) return false;
      if(!certificate_.Equals(other.certificate_)) return false;
      if (ServerName != other.ServerName) return false;
      if(!nextProtocol_.Equals(other.nextProtocol_)) return false;
      if (DisableSessionResumption != other.DisableSessionResumption) return false;
      if (DisableSystemRoot != other.DisableSystemRoot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllowInsecure != false) hash ^= AllowInsecure.GetHashCode();
      if (AllowInsecureCiphers != false) hash ^= AllowInsecureCiphers.GetHashCode();
      hash ^= certificate_.GetHashCode();
      if (ServerName.Length != 0) hash ^= ServerName.GetHashCode();
      hash ^= nextProtocol_.GetHashCode();
      if (DisableSessionResumption != false) hash ^= DisableSessionResumption.GetHashCode();
      if (DisableSystemRoot != false) hash ^= DisableSystemRoot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllowInsecure != false) {
        output.WriteRawTag(8);
        output.WriteBool(AllowInsecure);
      }
      certificate_.WriteTo(output, _repeated_certificate_codec);
      if (ServerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServerName);
      }
      nextProtocol_.WriteTo(output, _repeated_nextProtocol_codec);
      if (AllowInsecureCiphers != false) {
        output.WriteRawTag(40);
        output.WriteBool(AllowInsecureCiphers);
      }
      if (DisableSessionResumption != false) {
        output.WriteRawTag(48);
        output.WriteBool(DisableSessionResumption);
      }
      if (DisableSystemRoot != false) {
        output.WriteRawTag(56);
        output.WriteBool(DisableSystemRoot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllowInsecure != false) {
        size += 1 + 1;
      }
      if (AllowInsecureCiphers != false) {
        size += 1 + 1;
      }
      size += certificate_.CalculateSize(_repeated_certificate_codec);
      if (ServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
      }
      size += nextProtocol_.CalculateSize(_repeated_nextProtocol_codec);
      if (DisableSessionResumption != false) {
        size += 1 + 1;
      }
      if (DisableSystemRoot != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.AllowInsecure != false) {
        AllowInsecure = other.AllowInsecure;
      }
      if (other.AllowInsecureCiphers != false) {
        AllowInsecureCiphers = other.AllowInsecureCiphers;
      }
      certificate_.Add(other.certificate_);
      if (other.ServerName.Length != 0) {
        ServerName = other.ServerName;
      }
      nextProtocol_.Add(other.nextProtocol_);
      if (other.DisableSessionResumption != false) {
        DisableSessionResumption = other.DisableSessionResumption;
      }
      if (other.DisableSystemRoot != false) {
        DisableSystemRoot = other.DisableSystemRoot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AllowInsecure = input.ReadBool();
            break;
          }
          case 18: {
            certificate_.AddEntriesFrom(input, _repeated_certificate_codec);
            break;
          }
          case 26: {
            ServerName = input.ReadString();
            break;
          }
          case 34: {
            nextProtocol_.AddEntriesFrom(input, _repeated_nextProtocol_codec);
            break;
          }
          case 40: {
            AllowInsecureCiphers = input.ReadBool();
            break;
          }
          case 48: {
            DisableSessionResumption = input.ReadBool();
            break;
          }
          case 56: {
            DisableSystemRoot = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
